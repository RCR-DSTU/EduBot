
my_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000483c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f0  080049f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080049f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  20000010  08004a08  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000afc  08004a08  00020afc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d76  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c74  00000000  00000000  00034db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00037a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  00038d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e29  00000000  00000000  00039f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ad8  00000000  00000000  00051d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091638  00000000  00000000  00069841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fae79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000516c  00000000  00000000  000faecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080049b8 	.word	0x080049b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080049b8 	.word	0x080049b8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	4b48      	ldr	r3, [pc, #288]	; (8000614 <MX_GPIO_Init+0x13c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a47      	ldr	r2, [pc, #284]	; (8000614 <MX_GPIO_Init+0x13c>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b45      	ldr	r3, [pc, #276]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b41      	ldr	r3, [pc, #260]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a40      	ldr	r2, [pc, #256]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b3e      	ldr	r3, [pc, #248]	; (8000614 <MX_GPIO_Init+0x13c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <MX_GPIO_Init+0x13c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a39      	ldr	r2, [pc, #228]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b37      	ldr	r3, [pc, #220]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULPLXA_PIN_Pin|MULPLXB_PIN_Pin|MULPLXC_PIN_Pin|BTN1_DIR_PIN_Pin
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000548:	4833      	ldr	r0, [pc, #204]	; (8000618 <MX_GPIO_Init+0x140>)
 800054a:	f001 fa2b 	bl	80019a4 <HAL_GPIO_WritePin>
                          |BTN2_DIR_PIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POT_PIN_Pin;
 800054e:	2310      	movs	r3, #16
 8000550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000552:	2303      	movs	r3, #3
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POT_PIN_GPIO_Port, &GPIO_InitStruct);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4619      	mov	r1, r3
 8000560:	482e      	ldr	r0, [pc, #184]	; (800061c <MX_GPIO_Init+0x144>)
 8000562:	f001 f89b 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INT_PIN_Pin|EXTI5_PIN_Pin;
 8000566:	f248 0320 	movw	r3, #32800	; 0x8020
 800056a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000572:	2302      	movs	r3, #2
 8000574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4619      	mov	r1, r3
 800057c:	4827      	ldr	r0, [pc, #156]	; (800061c <MX_GPIO_Init+0x144>)
 800057e:	f001 f88d 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ADC_TOP_Pin|ADC_BOTTOM_Pin;
 8000582:	2303      	movs	r3, #3
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000586:	2303      	movs	r3, #3
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4619      	mov	r1, r3
 8000594:	4820      	ldr	r0, [pc, #128]	; (8000618 <MX_GPIO_Init+0x140>)
 8000596:	f001 f881 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EXTI1_PIN_Pin|EXTI2_PIN_Pin|EXTI3_PIN_Pin;
 800059a:	231c      	movs	r3, #28
 800059c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800059e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	481a      	ldr	r0, [pc, #104]	; (8000618 <MX_GPIO_Init+0x140>)
 80005b0:	f001 f874 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MULPLXA_PIN_Pin|MULPLXB_PIN_Pin|MULPLXC_PIN_Pin;
 80005b4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80005b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005be:	2302      	movs	r3, #2
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4619      	mov	r1, r3
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <MX_GPIO_Init+0x140>)
 80005ce:	f001 f865 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_DIR_PIN_Pin|BTN2_DIR_PIN_Pin;
 80005d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	4619      	mov	r1, r3
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <MX_GPIO_Init+0x140>)
 80005ec:	f001 f856 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80005f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_GPIO_Init+0x144>)
 8000608:	f001 f848 	bl	800169c <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40020400 	.word	0x40020400
 800061c:	40020000 	.word	0x40020000

08000620 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f001 f9d5 	bl	8001a0c <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f8e6 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40005400 	.word	0x40005400
 8000678:	00061a80 	.word	0x00061a80

0800067c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	; (8000700 <HAL_I2C_MspInit+0x84>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d12c      	bne.n	80006f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = II2C_SCL_PIN_Pin|I2C_SDA_PIN_Pin;
 80006ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c0:	2312      	movs	r3, #18
 80006c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006cc:	2304      	movs	r3, #4
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <HAL_I2C_MspInit+0x8c>)
 80006d8:	f000 ffe0 	bl	800169c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40005400 	.word	0x40005400
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SSD1306_Init();
 8000710:	f000 fc7e 	bl	8001010 <SSD1306_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fda6 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f822 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff fedc 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000720:	f7ff ff7e 	bl	8000620 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000724:	f000 f8f2 	bl	800090c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000728:	f000 f97e 	bl	8000a28 <MX_TIM2_Init>
  MX_TIM3_Init();
 800072c:	f000 f9d0 	bl	8000ad0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000730:	f000 faf8 	bl	8000d24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000734:	f000 fb20 	bl	8000d78 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000738:	f000 fbc6 	bl	8000ec8 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_PIN_GPIO_Port,LED_PIN_Pin);
 800073c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <main+0x50>)
 8000742:	f001 f948 	bl	80019d6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(LED_PIN_GPIO_Port,LED_PIN_Pin,GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <main+0x50>)
 800074e:	f001 f929 	bl	80019a4 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000752:	20fa      	movs	r0, #250	; 0xfa
 8000754:	f000 fdf8 	bl	8001348 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_PIN_GPIO_Port,LED_PIN_Pin);
 8000758:	e7f0      	b.n	800073c <main+0x30>
 800075a:	bf00      	nop
 800075c:	40020000 	.word	0x40020000

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 f91a 	bl	80049a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemClock_Config+0xd0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a28      	ldr	r2, [pc, #160]	; (8000830 <SystemClock_Config+0xd0>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <SystemClock_Config+0xd0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemClock_Config+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xd4>)
 80007ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <SystemClock_Config+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007d4:	2319      	movs	r3, #25
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007de:	2304      	movs	r3, #4
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fa18 	bl	8002c20 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f6:	f000 f81f 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2102      	movs	r1, #2
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fc7a 	bl	8003110 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000822:	f000 f809 	bl	8000838 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 fd12 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b092      	sub	sp, #72	; 0x48
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000912:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
 800092c:	615a      	str	r2, [r3, #20]
 800092e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f004 f836 	bl	80049a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093c:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <MX_TIM1_Init+0x114>)
 800093e:	4a39      	ldr	r2, [pc, #228]	; (8000a24 <MX_TIM1_Init+0x118>)
 8000940:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <MX_TIM1_Init+0x114>)
 8000944:	2253      	movs	r2, #83	; 0x53
 8000946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <MX_TIM1_Init+0x114>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_TIM1_Init+0x114>)
 8000950:	22c8      	movs	r2, #200	; 0xc8
 8000952:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <MX_TIM1_Init+0x114>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095a:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <MX_TIM1_Init+0x114>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_TIM1_Init+0x114>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000966:	482e      	ldr	r0, [pc, #184]	; (8000a20 <MX_TIM1_Init+0x114>)
 8000968:	f002 fdb2 	bl	80034d0 <HAL_TIM_PWM_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000972:	f7ff ff61 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000982:	4619      	mov	r1, r3
 8000984:	4826      	ldr	r0, [pc, #152]	; (8000a20 <MX_TIM1_Init+0x114>)
 8000986:	f003 f967 	bl	8003c58 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000990:	f7ff ff52 	bl	8000838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000994:	2360      	movs	r3, #96	; 0x60
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	4819      	ldr	r0, [pc, #100]	; (8000a20 <MX_TIM1_Init+0x114>)
 80009ba:	f002 fe7f 	bl	80036bc <HAL_TIM_PWM_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009c4:	f7ff ff38 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	2204      	movs	r2, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_TIM1_Init+0x114>)
 80009d2:	f002 fe73 	bl	80036bc <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80009dc:	f7ff ff2c 	bl	8000838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_TIM1_Init+0x114>)
 8000a04:	f003 f996 	bl	8003d34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000a0e:	f7ff ff13 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <MX_TIM1_Init+0x114>)
 8000a14:	f000 f94c 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 8000a18:	bf00      	nop
 8000a1a:	3748      	adds	r7, #72	; 0x48
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000080 	.word	0x20000080
 8000a24:	40010000 	.word	0x40010000

08000a28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2224      	movs	r2, #36	; 0x24
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 ffb6 	bl	80049a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <MX_TIM2_Init+0xa4>)
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_TIM2_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_TIM2_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_TIM2_Init+0xa4>)
 8000a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_TIM2_Init+0xa4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_TIM2_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a74:	2301      	movs	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a84:	2301      	movs	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_TIM2_Init+0xa4>)
 8000a98:	f002 fd69 	bl	800356e <HAL_TIM_Encoder_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000aa2:	f7ff fec9 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_TIM2_Init+0xa4>)
 8000ab4:	f003 f8d0 	bl	8003c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000abe:	f7ff febb 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000c8 	.word	0x200000c8

08000ad0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2224      	movs	r2, #36	; 0x24
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 ff62 	bl	80049a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <MX_TIM3_Init+0xa0>)
 8000aee:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <MX_TIM3_Init+0xa4>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_TIM3_Init+0xa0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_TIM3_Init+0xa0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_TIM3_Init+0xa0>)
 8000b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_TIM3_Init+0xa0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_TIM3_Init+0xa0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <MX_TIM3_Init+0xa0>)
 8000b3e:	f002 fd16 	bl	800356e <HAL_TIM_Encoder_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f7ff fe76 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_TIM3_Init+0xa0>)
 8000b5a:	f003 f87d 	bl	8003c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b64:	f7ff fe68 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000110 	.word	0x20000110
 8000b74:	40000400 	.word	0x40000400

08000b78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d10d      	bne.n	8000ba6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_TIM_PWM_MspInit+0x40>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <HAL_TIM_PWM_MspInit+0x40>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_TIM_PWM_MspInit+0x40>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	; 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bdc:	d12c      	bne.n	8000c38 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a28      	ldr	r2, [pc, #160]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1A_PIN_Pin|ENCODER1B_PIN_Pin;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <HAL_TIM_Encoder_MspInit+0xec>)
 8000c32:	f000 fd33 	bl	800169c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c36:	e030      	b.n	8000c9a <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HAL_TIM_Encoder_MspInit+0xf0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12b      	bne.n	8000c9a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2A_PIN_Pin|ENCODER2B_PIN_Pin;
 8000c7a:	23c0      	movs	r3, #192	; 0xc0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <HAL_TIM_Encoder_MspInit+0xec>)
 8000c96:	f000 fd01 	bl	800169c <HAL_GPIO_Init>
}
 8000c9a:	bf00      	nop
 8000c9c:	3730      	adds	r7, #48	; 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40000400 	.word	0x40000400

08000cb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <HAL_TIM_MspPostInit+0x68>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d11e      	bne.n	8000d10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_TIM_MspPostInit+0x6c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_TIM_MspPostInit+0x6c>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_TIM_MspPostInit+0x6c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = BTN2_PWM_PIN_Pin|BTN1_PWM_PIN_Pin;
 8000cee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_TIM_MspPostInit+0x70>)
 8000d0c:	f000 fcc6 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000

08000d24 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_USART1_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d5c:	f003 f83c 	bl	8003dd8 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f7ff fd67 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000158 	.word	0x20000158
 8000d74:	40011000 	.word	0x40011000

08000d78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000db0:	f003 f812 	bl	8003dd8 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f7ff fd3d 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000019c 	.word	0x2000019c
 8000dc8:	40004400 	.word	0x40004400

08000dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a32      	ldr	r2, [pc, #200]	; (8000eb4 <HAL_UART_MspInit+0xe8>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12c      	bne.n	8000e48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX2_PIN_Pin|RX2_PIN_Pin;
 8000e26:	23c0      	movs	r3, #192	; 0xc0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e36:	2307      	movs	r3, #7
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481e      	ldr	r0, [pc, #120]	; (8000ebc <HAL_UART_MspInit+0xf0>)
 8000e42:	f000 fc2b 	bl	800169c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e46:	e030      	b.n	8000eaa <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <HAL_UART_MspInit+0xf4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12b      	bne.n	8000eaa <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_UART_MspInit+0xec>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX3_PIN_Pin|RX3_PIN_Pin;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e96:	2302      	movs	r3, #2
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <HAL_UART_MspInit+0xf8>)
 8000ea6:	f000 fbf9 	bl	800169c <HAL_GPIO_Init>
}
 8000eaa:	bf00      	nop
 8000eac:	3730      	adds	r7, #48	; 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40011000 	.word	0x40011000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ece:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ed2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee8:	2202      	movs	r2, #2
 8000eea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0c:	f001 fd6b 	bl	80029e6 <HAL_PCD_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f16:	f7ff fc8f 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001e0 	.word	0x200001e0

08000f24 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f44:	d132      	bne.n	8000fac <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_PCD_MspInit+0x90>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <HAL_PCD_MspInit+0x90>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_PCD_MspInit+0x90>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f74:	230a      	movs	r3, #10
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <HAL_PCD_MspInit+0x94>)
 8000f80:	f000 fb8c 	bl	800169c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_PCD_MspInit+0x90>)
 8000f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_PCD_MspInit+0x90>)
 8000f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8e:	6353      	str	r3, [r2, #52]	; 0x34
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_PCD_MspInit+0x90>)
 8000f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_PCD_MspInit+0x90>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_PCD_MspInit+0x90>)
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fc2:	490e      	ldr	r1, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd8:	4c0b      	ldr	r4, [pc, #44]	; (8001008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe6:	f7ff fc7f 	bl	80008e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f003 fcb9 	bl	8004960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fb8d 	bl	800070c <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001000:	080049f8 	.word	0x080049f8
  ldr r2, =_sbss
 8001004:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001008:	20000afc 	.word	0x20000afc

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001016:	f000 f8f1 	bl	80011fc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800101a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800101e:	2201      	movs	r2, #1
 8001020:	2178      	movs	r1, #120	; 0x78
 8001022:	4858      	ldr	r0, [pc, #352]	; (8001184 <SSD1306_Init+0x174>)
 8001024:	f001 f864 	bl	80020f0 <HAL_I2C_IsDeviceReady>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800102e:	2300      	movs	r3, #0
 8001030:	e0a4      	b.n	800117c <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001032:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001036:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001038:	e002      	b.n	8001040 <SSD1306_Init+0x30>
		p--;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3b01      	subs	r3, #1
 800103e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f9      	bne.n	800103a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001046:	22ae      	movs	r2, #174	; 0xae
 8001048:	2100      	movs	r1, #0
 800104a:	2078      	movs	r0, #120	; 0x78
 800104c:	f000 f8ec 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	2078      	movs	r0, #120	; 0x78
 8001056:	f000 f8e7 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800105a:	2210      	movs	r2, #16
 800105c:	2100      	movs	r1, #0
 800105e:	2078      	movs	r0, #120	; 0x78
 8001060:	f000 f8e2 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001064:	22b0      	movs	r2, #176	; 0xb0
 8001066:	2100      	movs	r1, #0
 8001068:	2078      	movs	r0, #120	; 0x78
 800106a:	f000 f8dd 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800106e:	22c8      	movs	r2, #200	; 0xc8
 8001070:	2100      	movs	r1, #0
 8001072:	2078      	movs	r0, #120	; 0x78
 8001074:	f000 f8d8 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2078      	movs	r0, #120	; 0x78
 800107e:	f000 f8d3 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001082:	2210      	movs	r2, #16
 8001084:	2100      	movs	r1, #0
 8001086:	2078      	movs	r0, #120	; 0x78
 8001088:	f000 f8ce 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800108c:	2240      	movs	r2, #64	; 0x40
 800108e:	2100      	movs	r1, #0
 8001090:	2078      	movs	r0, #120	; 0x78
 8001092:	f000 f8c9 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001096:	2281      	movs	r2, #129	; 0x81
 8001098:	2100      	movs	r1, #0
 800109a:	2078      	movs	r0, #120	; 0x78
 800109c:	f000 f8c4 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	2100      	movs	r1, #0
 80010a4:	2078      	movs	r0, #120	; 0x78
 80010a6:	f000 f8bf 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010aa:	22a1      	movs	r2, #161	; 0xa1
 80010ac:	2100      	movs	r1, #0
 80010ae:	2078      	movs	r0, #120	; 0x78
 80010b0:	f000 f8ba 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010b4:	22a6      	movs	r2, #166	; 0xa6
 80010b6:	2100      	movs	r1, #0
 80010b8:	2078      	movs	r0, #120	; 0x78
 80010ba:	f000 f8b5 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010be:	22a8      	movs	r2, #168	; 0xa8
 80010c0:	2100      	movs	r1, #0
 80010c2:	2078      	movs	r0, #120	; 0x78
 80010c4:	f000 f8b0 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010c8:	223f      	movs	r2, #63	; 0x3f
 80010ca:	2100      	movs	r1, #0
 80010cc:	2078      	movs	r0, #120	; 0x78
 80010ce:	f000 f8ab 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010d2:	22a4      	movs	r2, #164	; 0xa4
 80010d4:	2100      	movs	r1, #0
 80010d6:	2078      	movs	r0, #120	; 0x78
 80010d8:	f000 f8a6 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010dc:	22d3      	movs	r2, #211	; 0xd3
 80010de:	2100      	movs	r1, #0
 80010e0:	2078      	movs	r0, #120	; 0x78
 80010e2:	f000 f8a1 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2078      	movs	r0, #120	; 0x78
 80010ec:	f000 f89c 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010f0:	22d5      	movs	r2, #213	; 0xd5
 80010f2:	2100      	movs	r1, #0
 80010f4:	2078      	movs	r0, #120	; 0x78
 80010f6:	f000 f897 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010fa:	22f0      	movs	r2, #240	; 0xf0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2078      	movs	r0, #120	; 0x78
 8001100:	f000 f892 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001104:	22d9      	movs	r2, #217	; 0xd9
 8001106:	2100      	movs	r1, #0
 8001108:	2078      	movs	r0, #120	; 0x78
 800110a:	f000 f88d 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800110e:	2222      	movs	r2, #34	; 0x22
 8001110:	2100      	movs	r1, #0
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f000 f888 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001118:	22da      	movs	r2, #218	; 0xda
 800111a:	2100      	movs	r1, #0
 800111c:	2078      	movs	r0, #120	; 0x78
 800111e:	f000 f883 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001122:	2212      	movs	r2, #18
 8001124:	2100      	movs	r1, #0
 8001126:	2078      	movs	r0, #120	; 0x78
 8001128:	f000 f87e 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800112c:	22db      	movs	r2, #219	; 0xdb
 800112e:	2100      	movs	r1, #0
 8001130:	2078      	movs	r0, #120	; 0x78
 8001132:	f000 f879 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001136:	2220      	movs	r2, #32
 8001138:	2100      	movs	r1, #0
 800113a:	2078      	movs	r0, #120	; 0x78
 800113c:	f000 f874 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001140:	228d      	movs	r2, #141	; 0x8d
 8001142:	2100      	movs	r1, #0
 8001144:	2078      	movs	r0, #120	; 0x78
 8001146:	f000 f86f 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800114a:	2214      	movs	r2, #20
 800114c:	2100      	movs	r1, #0
 800114e:	2078      	movs	r0, #120	; 0x78
 8001150:	f000 f86a 	bl	8001228 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001154:	22af      	movs	r2, #175	; 0xaf
 8001156:	2100      	movs	r1, #0
 8001158:	2078      	movs	r0, #120	; 0x78
 800115a:	f000 f865 	bl	8001228 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f834 	bl	80011cc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001164:	f000 f812 	bl	800118c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <SSD1306_Init+0x178>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <SSD1306_Init+0x178>)
 8001170:	2200      	movs	r2, #0
 8001172:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SSD1306_Init+0x178>)
 8001176:	2201      	movs	r2, #1
 8001178:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000002c 	.word	0x2000002c
 8001188:	20000af0 	.word	0x20000af0

0800118c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	SSD1306_Buffer_all[0] = 0x40;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <SSD1306_UpdateScreen+0x38>)
 8001192:	2240      	movs	r2, #64	; 0x40
 8001194:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1);
 8001196:	f240 4301 	movw	r3, #1025	; 0x401
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SSD1306_UpdateScreen+0x38>)
 800119c:	2178      	movs	r1, #120	; 0x78
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <SSD1306_UpdateScreen+0x3c>)
 80011a0:	f000 fe76 	bl	8001e90 <HAL_I2C_Master_Transmit_DMA>
	while(HAL_DMA_GetState(hi2c1.hdmatx) != HAL_DMA_STATE_READY)
 80011a4:	e002      	b.n	80011ac <SSD1306_UpdateScreen+0x20>
	{
		HAL_Delay(1); //Change for your RTOS
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f8ce 	bl	8001348 <HAL_Delay>
	while(HAL_DMA_GetState(hi2c1.hdmatx) != HAL_DMA_STATE_READY)
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <SSD1306_UpdateScreen+0x3c>)
 80011ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fa2a 	bl	800160a <HAL_DMA_GetState>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d1f4      	bne.n	80011a6 <SSD1306_UpdateScreen+0x1a>
	}
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200006ec 	.word	0x200006ec
 80011c8:	2000002c 	.word	0x2000002c

080011cc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(uint8_t color) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <SSD1306_Fill+0x2c>)
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <SSD1306_Fill+0x18>
 80011e0:	2300      	movs	r3, #0
 80011e2:	e000      	b.n	80011e6 <SSD1306_Fill+0x1a>
 80011e4:	23ff      	movs	r3, #255	; 0xff
 80011e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ea:	4619      	mov	r1, r3
 80011ec:	f003 fbdc 	bl	80049a8 <memset>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000004 	.word	0x20000004

080011fc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <ssd1306_I2C_Init+0x28>)
 8001204:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001206:	e002      	b.n	800120e <ssd1306_I2C_Init+0x12>
		p--;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f9      	bne.n	8001208 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	0003d090 	.word	0x0003d090

08001228 <ssd1306_I2C_Write>:
	HAL_I2C_Master_Transmit(&hi2c1, address, &reg, 1, 100);
	HAL_I2C_Master_Transmit_DMA(&hi2c1, address, data, count);
}


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	460b      	mov	r3, r1
 8001234:	71bb      	strb	r3, [r7, #6]
 8001236:	4613      	mov	r3, r2
 8001238:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800123e:	797b      	ldrb	r3, [r7, #5]
 8001240:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	b299      	uxth	r1, r3
 8001246:	f107 020c 	add.w	r2, r7, #12
 800124a:	230a      	movs	r3, #10
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2302      	movs	r3, #2
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <ssd1306_I2C_Write+0x38>)
 8001252:	f000 fd1f 	bl	8001c94 <HAL_I2C_Master_Transmit>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000002c 	.word	0x2000002c

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_Init+0x40>)
 800126e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_Init+0x40>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_Init+0x40>)
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 f931 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	200f      	movs	r0, #15
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fad4 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f93b 	bl	8001542 <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 f911 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	2000000c 	.word	0x2000000c
 8001304:	20000008 	.word	0x20000008

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	2000000c 	.word	0x2000000c
 800132c:	20000af8 	.word	0x20000af8

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000af8 	.word	0x20000af8

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff ffee 	bl	8001330 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffde 	bl	8001330 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000000c 	.word	0x2000000c

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff47 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff5c 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffb0 	bl	80014b0 <SysTick_Config>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_DMA_Start_IT+0x26>
 800157c:	2302      	movs	r3, #2
 800157e:	e040      	b.n	8001602 <HAL_DMA_Start_IT+0xa8>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d12f      	bne.n	80015f4 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 f848 	bl	800163e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	223f      	movs	r2, #63	; 0x3f
 80015b4:	409a      	lsls	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0216 	orr.w	r2, r2, #22
 80015c8:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0208 	orr.w	r2, r2, #8
 80015e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e005      	b.n	8001600 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015fc:	2302      	movs	r3, #2
 80015fe:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001618:	b2db      	uxtb	r3, r3
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800165a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b40      	cmp	r3, #64	; 0x40
 800166a:	d108      	bne.n	800167e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800167c:	e007      	b.n	800168e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	60da      	str	r2, [r3, #12]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e159      	b.n	800196c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8148 	bne.w	8001966 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d005      	beq.n	80016ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d130      	bne.n	8001750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b03      	cmp	r3, #3
 800175a:	d017      	beq.n	800178c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d123      	bne.n	80017e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0203 	and.w	r2, r3, #3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a2 	beq.w	8001966 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b57      	ldr	r3, [pc, #348]	; (8001984 <HAL_GPIO_Init+0x2e8>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a56      	ldr	r2, [pc, #344]	; (8001984 <HAL_GPIO_Init+0x2e8>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b54      	ldr	r3, [pc, #336]	; (8001984 <HAL_GPIO_Init+0x2e8>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183e:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_GPIO_Init+0x2ec>)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a49      	ldr	r2, [pc, #292]	; (800198c <HAL_GPIO_Init+0x2f0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d019      	beq.n	800189e <HAL_GPIO_Init+0x202>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a48      	ldr	r2, [pc, #288]	; (8001990 <HAL_GPIO_Init+0x2f4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x1fe>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a47      	ldr	r2, [pc, #284]	; (8001994 <HAL_GPIO_Init+0x2f8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x1fa>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a46      	ldr	r2, [pc, #280]	; (8001998 <HAL_GPIO_Init+0x2fc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x1f6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_GPIO_Init+0x300>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x1f2>
 800188a:	2304      	movs	r3, #4
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 800188e:	2307      	movs	r3, #7
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 800189e:	2300      	movs	r3, #0
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x2ec>)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018be:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <HAL_GPIO_Init+0x304>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e2:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <HAL_GPIO_Init+0x304>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_GPIO_Init+0x304>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800190c:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <HAL_GPIO_Init+0x304>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001936:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_GPIO_Init+0x304>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b0f      	cmp	r3, #15
 8001970:	f67f aea2 	bls.w	80016b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40013c00 	.word	0x40013c00

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c0:	e003      	b.n	80019ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e8:	887a      	ldrh	r2, [r7, #2]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	041a      	lsls	r2, r3, #16
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	400b      	ands	r3, r1
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	619a      	str	r2, [r3, #24]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e12b      	b.n	8001c76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7fe fe22 	bl	800067c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2224      	movs	r2, #36	; 0x24
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a70:	f001 fd06 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8001a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a81      	ldr	r2, [pc, #516]	; (8001c80 <HAL_I2C_Init+0x274>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d807      	bhi.n	8001a90 <HAL_I2C_Init+0x84>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a80      	ldr	r2, [pc, #512]	; (8001c84 <HAL_I2C_Init+0x278>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	bf94      	ite	ls
 8001a88:	2301      	movls	r3, #1
 8001a8a:	2300      	movhi	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	e006      	b.n	8001a9e <HAL_I2C_Init+0x92>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4a7d      	ldr	r2, [pc, #500]	; (8001c88 <HAL_I2C_Init+0x27c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bf94      	ite	ls
 8001a98:	2301      	movls	r3, #1
 8001a9a:	2300      	movhi	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0e7      	b.n	8001c76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4a78      	ldr	r2, [pc, #480]	; (8001c8c <HAL_I2C_Init+0x280>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	0c9b      	lsrs	r3, r3, #18
 8001ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a6a      	ldr	r2, [pc, #424]	; (8001c80 <HAL_I2C_Init+0x274>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d802      	bhi.n	8001ae0 <HAL_I2C_Init+0xd4>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3301      	adds	r3, #1
 8001ade:	e009      	b.n	8001af4 <HAL_I2C_Init+0xe8>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	4a69      	ldr	r2, [pc, #420]	; (8001c90 <HAL_I2C_Init+0x284>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	099b      	lsrs	r3, r3, #6
 8001af2:	3301      	adds	r3, #1
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	495c      	ldr	r1, [pc, #368]	; (8001c80 <HAL_I2C_Init+0x274>)
 8001b10:	428b      	cmp	r3, r1
 8001b12:	d819      	bhi.n	8001b48 <HAL_I2C_Init+0x13c>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1e59      	subs	r1, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b22:	1c59      	adds	r1, r3, #1
 8001b24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b28:	400b      	ands	r3, r1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <HAL_I2C_Init+0x138>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1e59      	subs	r1, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b42:	e051      	b.n	8001be8 <HAL_I2C_Init+0x1dc>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e04f      	b.n	8001be8 <HAL_I2C_Init+0x1dc>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d111      	bne.n	8001b74 <HAL_I2C_Init+0x168>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1e58      	subs	r0, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	440b      	add	r3, r1
 8001b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	e012      	b.n	8001b9a <HAL_I2C_Init+0x18e>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	0099      	lsls	r1, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Init+0x196>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e022      	b.n	8001be8 <HAL_I2C_Init+0x1dc>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_I2C_Init+0x1bc>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1e58      	subs	r0, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6859      	ldr	r1, [r3, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	440b      	add	r3, r1
 8001bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc6:	e00f      	b.n	8001be8 <HAL_I2C_Init+0x1dc>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e58      	subs	r0, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	0099      	lsls	r1, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bde:	3301      	adds	r3, #1
 8001be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	6809      	ldr	r1, [r1, #0]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6911      	ldr	r1, [r2, #16]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68d2      	ldr	r2, [r2, #12]
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2220      	movs	r2, #32
 8001c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	000186a0 	.word	0x000186a0
 8001c84:	001e847f 	.word	0x001e847f
 8001c88:	003d08ff 	.word	0x003d08ff
 8001c8c:	431bde83 	.word	0x431bde83
 8001c90:	10624dd3 	.word	0x10624dd3

08001c94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	817b      	strh	r3, [r7, #10]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff fb42 	bl	8001330 <HAL_GetTick>
 8001cac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	f040 80e0 	bne.w	8001e7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2319      	movs	r3, #25
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4970      	ldr	r1, [pc, #448]	; (8001e88 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fd06 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0d3      	b.n	8001e7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2C_Master_Transmit+0x50>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e0cc      	b.n	8001e7e <HAL_I2C_Master_Transmit+0x1ea>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d007      	beq.n	8001d0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2221      	movs	r2, #33	; 0x21
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2210      	movs	r2, #16
 8001d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	893a      	ldrh	r2, [r7, #8]
 8001d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4a50      	ldr	r2, [pc, #320]	; (8001e8c <HAL_I2C_Master_Transmit+0x1f8>)
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d4c:	8979      	ldrh	r1, [r7, #10]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fb2c 	bl	80023b0 <I2C_MasterRequestWrite>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e08d      	b.n	8001e7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d78:	e066      	b.n	8001e48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	6a39      	ldr	r1, [r7, #32]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fd80 	bl	8002884 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00d      	beq.n	8001da6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d107      	bne.n	8001da2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e06b      	b.n	8001e7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d11b      	bne.n	8001e1c <HAL_I2C_Master_Transmit+0x188>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d017      	beq.n	8001e1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	6a39      	ldr	r1, [r7, #32]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fd70 	bl	8002906 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00d      	beq.n	8001e48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d107      	bne.n	8001e44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e01a      	b.n	8001e7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d194      	bne.n	8001d7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	00100002 	.word	0x00100002
 8001e8c:	ffff0000 	.word	0xffff0000

08001e90 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	817b      	strh	r3, [r7, #10]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	f040 810d 	bne.w	80020d0 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001eb6:	4b89      	ldr	r3, [pc, #548]	; (80020dc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	4a88      	ldr	r2, [pc, #544]	; (80020e0 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0a1a      	lsrs	r2, r3, #8
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	009a      	lsls	r2, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d116      	bne.n	8001f0a <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0e3      	b.n	80020d2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d0db      	beq.n	8001ed0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_I2C_Master_Transmit_DMA+0x96>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e0d5      	b.n	80020d2 <HAL_I2C_Master_Transmit_DMA+0x242>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d007      	beq.n	8001f4c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2221      	movs	r2, #33	; 0x21
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2210      	movs	r2, #16
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	893a      	ldrh	r2, [r7, #8]
 8001f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a56      	ldr	r2, [pc, #344]	; (80020e4 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001f8e:	897a      	ldrh	r2, [r7, #10]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d07b      	beq.n	8002094 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d02a      	beq.n	8001ffa <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa8:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <HAL_I2C_Master_Transmit_DMA+0x258>)
 8001faa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb0:	4a4e      	ldr	r2, [pc, #312]	; (80020ec <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8001fb2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	2200      	movs	r2, #0
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc8:	2200      	movs	r2, #0
 8001fca:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	4619      	mov	r1, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3310      	adds	r3, #16
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	f7ff fab6 	bl	800155a <HAL_DMA_Start_IT>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d139      	bne.n	800206c <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8001ff8:	e013      	b.n	8002022 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e057      	b.n	80020d2 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002038:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002048:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002058:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e02f      	b.n	80020cc <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f043 0210 	orr.w	r2, r3, #16
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e01e      	b.n	80020d2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020a2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b2:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80020ca:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e000      	b.n	80020d2 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 80020d0:	2302      	movs	r3, #2
  }
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000000 	.word	0x20000000
 80020e0:	14f8b589 	.word	0x14f8b589
 80020e4:	ffff0000 	.word	0xffff0000
 80020e8:	080024b5 	.word	0x080024b5
 80020ec:	0800265f 	.word	0x0800265f

080020f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	460b      	mov	r3, r1
 80020fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff f916 	bl	8001330 <HAL_GetTick>
 8002104:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	f040 8111 	bne.w	800233a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2319      	movs	r3, #25
 800211e:	2201      	movs	r2, #1
 8002120:	4988      	ldr	r1, [pc, #544]	; (8002344 <HAL_I2C_IsDeviceReady+0x254>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fad8 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800212e:	2302      	movs	r3, #2
 8002130:	e104      	b.n	800233c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_I2C_IsDeviceReady+0x50>
 800213c:	2302      	movs	r3, #2
 800213e:	e0fd      	b.n	800233c <HAL_I2C_IsDeviceReady+0x24c>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d007      	beq.n	8002166 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002174:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2224      	movs	r2, #36	; 0x24
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a70      	ldr	r2, [pc, #448]	; (8002348 <HAL_I2C_IsDeviceReady+0x258>)
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002198:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa96 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c0:	d103      	bne.n	80021ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0b6      	b.n	800233c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ce:	897b      	ldrh	r3, [r7, #10]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff f8a7 	bl	8001330 <HAL_GetTick>
 80021e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002212:	e025      	b.n	8002260 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002214:	f7ff f88c 	bl	8001330 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d302      	bcc.n	800222a <HAL_I2C_IsDeviceReady+0x13a>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	22a0      	movs	r2, #160	; 0xa0
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b02      	cmp	r3, #2
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2ba0      	cmp	r3, #160	; 0xa0
 800226a:	d005      	beq.n	8002278 <HAL_I2C_IsDeviceReady+0x188>
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_I2C_IsDeviceReady+0x188>
 8002272:	7dbb      	ldrb	r3, [r7, #22]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0cd      	beq.n	8002214 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d129      	bne.n	80022e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	4921      	ldr	r1, [pc, #132]	; (8002344 <HAL_I2C_IsDeviceReady+0x254>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fa0a 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e036      	b.n	800233c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e02c      	b.n	800233c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2319      	movs	r3, #25
 8002302:	2201      	movs	r2, #1
 8002304:	490f      	ldr	r1, [pc, #60]	; (8002344 <HAL_I2C_IsDeviceReady+0x254>)
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f9e6 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e012      	b.n	800233c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	3301      	adds	r3, #1
 800231a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	f4ff af32 	bcc.w	800218a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	00100002 	.word	0x00100002
 8002348:	ffff0000 	.word	0xffff0000

0800234c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	460b      	mov	r3, r1
 80023be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d006      	beq.n	80023da <I2C_MasterRequestWrite+0x2a>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d003      	beq.n	80023da <I2C_MasterRequestWrite+0x2a>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023d8:	d108      	bne.n	80023ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e00b      	b.n	8002404 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	2b12      	cmp	r3, #18
 80023f2:	d107      	bne.n	8002404 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f961 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00d      	beq.n	8002438 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242a:	d103      	bne.n	8002434 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e035      	b.n	80024a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002440:	d108      	bne.n	8002454 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	e01b      	b.n	800248c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002454:	897b      	ldrh	r3, [r7, #10]
 8002456:	11db      	asrs	r3, r3, #7
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f003 0306 	and.w	r3, r3, #6
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f063 030f 	orn	r3, r3, #15
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <I2C_MasterRequestWrite+0xfc>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f987 	bl	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e010      	b.n	80024a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4907      	ldr	r1, [pc, #28]	; (80024b0 <I2C_MasterRequestWrite+0x100>)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f977 	bl	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	00010008 	.word	0x00010008
 80024b0:	00010002 	.word	0x00010002

080024b4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024d0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024e6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	2200      	movs	r2, #0
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	2200      	movs	r2, #0
 8002506:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800250e:	2b21      	cmp	r3, #33	; 0x21
 8002510:	d007      	beq.n	8002522 <I2C_DMAXferCplt+0x6e>
 8002512:	7cfb      	ldrb	r3, [r7, #19]
 8002514:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8002518:	2b22      	cmp	r3, #34	; 0x22
 800251a:	d131      	bne.n	8002580 <I2C_DMAXferCplt+0xcc>
 800251c:	7cbb      	ldrb	r3, [r7, #18]
 800251e:	2b20      	cmp	r3, #32
 8002520:	d12e      	bne.n	8002580 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002530:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2200      	movs	r2, #0
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b29      	cmp	r3, #41	; 0x29
 800253c:	d10a      	bne.n	8002554 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2228      	movs	r2, #40	; 0x28
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800254c:	6978      	ldr	r0, [r7, #20]
 800254e:	f7ff ff07 	bl	8002360 <HAL_I2C_SlaveTxCpltCallback>
 8002552:	e00c      	b.n	800256e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b2a      	cmp	r3, #42	; 0x2a
 8002558:	d109      	bne.n	800256e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2222      	movs	r2, #34	; 0x22
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2228      	movs	r2, #40	; 0x28
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002568:	6978      	ldr	r0, [r7, #20]
 800256a:	f7ff ff03 	bl	8002374 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800257c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800257e:	e06a      	b.n	8002656 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d064      	beq.n	8002656 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025bc:	d009      	beq.n	80025d2 <I2C_DMAXferCplt+0x11e>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d006      	beq.n	80025d2 <I2C_DMAXferCplt+0x11e>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80025ca:	d002      	beq.n	80025d2 <I2C_DMAXferCplt+0x11e>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d107      	bne.n	80025e2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025f0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002600:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8002610:	6978      	ldr	r0, [r7, #20]
 8002612:	f7ff fec3 	bl	800239c <HAL_I2C_ErrorCallback>
}
 8002616:	e01e      	b.n	8002656 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	d10a      	bne.n	8002642 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff fea4 	bl	8002388 <HAL_I2C_MemRxCpltCallback>
}
 8002640:	e009      	b.n	8002656 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2212      	movs	r2, #18
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002650:	6978      	ldr	r0, [r7, #20]
 8002652:	f7ff fe7b 	bl	800234c <HAL_I2C_MasterRxCpltCallback>
}
 8002656:	bf00      	nop
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	2200      	movs	r2, #0
 800267a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	2200      	movs	r2, #0
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7fe ffca 	bl	8001626 <HAL_DMA_GetError>
 8002692:	4603      	mov	r3, r0
 8002694:	2b02      	cmp	r3, #2
 8002696:	d01b      	beq.n	80026d0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7ff fe66 	bl	800239c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e8:	e025      	b.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d021      	beq.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f2:	f7fe fe1d 	bl	8001330 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d116      	bne.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e023      	b.n	800277e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d10d      	bne.n	800275c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	e00c      	b.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4013      	ands	r3, r2
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	429a      	cmp	r2, r3
 800277a:	d0b6      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002794:	e051      	b.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a4:	d123      	bne.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e046      	b.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d021      	beq.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fe fd9b 	bl	8001330 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e020      	b.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10c      	bne.n	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	e00b      	b.n	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	43da      	mvns	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4013      	ands	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d18d      	bne.n	8002796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002890:	e02d      	b.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f878 	bl	8002988 <I2C_IsAcknowledgeFailed>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e02d      	b.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d021      	beq.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7fe fd41 	bl	8001330 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d116      	bne.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e007      	b.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d1ca      	bne.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002912:	e02d      	b.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f837 	bl	8002988 <I2C_IsAcknowledgeFailed>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e02d      	b.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d021      	beq.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292c:	f7fe fd00 	bl	8001330 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	429a      	cmp	r2, r3
 800293a:	d302      	bcc.n	8002942 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e007      	b.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d1ca      	bne.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299e:	d11b      	bne.n	80029d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f043 0204 	orr.w	r2, r3, #4
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e8:	b08f      	sub	sp, #60	; 0x3c
 80029ea:	af0a      	add	r7, sp, #40	; 0x28
 80029ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e10f      	b.n	8002c18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fa86 	bl	8000f24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f001 fcf1 	bl	800441e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	687e      	ldr	r6, [r7, #4]
 8002a44:	466d      	mov	r5, sp
 8002a46:	f106 0410 	add.w	r4, r6, #16
 8002a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a56:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a5a:	1d33      	adds	r3, r6, #4
 8002a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a5e:	6838      	ldr	r0, [r7, #0]
 8002a60:	f001 fc7c 	bl	800435c <USB_CoreInit>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0d0      	b.n	8002c18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 fcdf 	bl	8004440 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	e04a      	b.n	8002b1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	333d      	adds	r3, #61	; 0x3d
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	333c      	adds	r3, #60	; 0x3c
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	b298      	uxth	r0, r3
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3344      	adds	r3, #68	; 0x44
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3340      	adds	r3, #64	; 0x40
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3348      	adds	r3, #72	; 0x48
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334c      	adds	r3, #76	; 0x4c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3354      	adds	r3, #84	; 0x54
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3af      	bcc.n	8002a88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e044      	b.n	8002bb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d3b5      	bcc.n	8002b2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	687e      	ldr	r6, [r7, #4]
 8002bca:	466d      	mov	r5, sp
 8002bcc:	f106 0410 	add.w	r4, r6, #16
 8002bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002be0:	1d33      	adds	r3, r6, #4
 8002be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be4:	6838      	ldr	r0, [r7, #0]
 8002be6:	f001 fc77 	bl	80044d8 <USB_DevInit>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e00d      	b.n	8002c18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fe42 	bl	800489a <USB_DevDisconnect>

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e267      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d075      	beq.n	8002d2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c3e:	4b88      	ldr	r3, [pc, #544]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d00c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4a:	4b85      	ldr	r3, [pc, #532]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d112      	bne.n	8002c7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c56:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c62:	d10b      	bne.n	8002c7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	4b7e      	ldr	r3, [pc, #504]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d05b      	beq.n	8002d28 <HAL_RCC_OscConfig+0x108>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d157      	bne.n	8002d28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e242      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c84:	d106      	bne.n	8002c94 <HAL_RCC_OscConfig+0x74>
 8002c86:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a75      	ldr	r2, [pc, #468]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e01d      	b.n	8002cd0 <HAL_RCC_OscConfig+0xb0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x98>
 8002c9e:	4b70      	ldr	r3, [pc, #448]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6f      	ldr	r2, [pc, #444]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6c      	ldr	r2, [pc, #432]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0xb0>
 8002cb8:	4b69      	ldr	r3, [pc, #420]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a68      	ldr	r2, [pc, #416]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	4b66      	ldr	r3, [pc, #408]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d013      	beq.n	8002d00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fb2a 	bl	8001330 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fb26 	bl	8001330 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e207      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b5b      	ldr	r3, [pc, #364]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xc0>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe fb16 	bl	8001330 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe fb12 	bl	8001330 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1f3      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0xe8>
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d063      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d11c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b44      	ldr	r3, [pc, #272]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x152>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e1c7      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4937      	ldr	r1, [pc, #220]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d86:	e03a      	b.n	8002dfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d90:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_RCC_OscConfig+0x244>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe facb 	bl	8001330 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fe fac7 	bl	8001330 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1a8      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4925      	ldr	r1, [pc, #148]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
 8002dd0:	e015      	b.n	8002dfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCC_OscConfig+0x244>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe faaa 	bl	8001330 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de0:	f7fe faa6 	bl	8001330 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e187      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d036      	beq.n	8002e78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d016      	beq.n	8002e40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_RCC_OscConfig+0x248>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe fa8a 	bl	8001330 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e20:	f7fe fa86 	bl	8001330 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e167      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x200>
 8002e3e:	e01b      	b.n	8002e78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_OscConfig+0x248>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fa73 	bl	8001330 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	e00e      	b.n	8002e6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fa6f 	bl	8001330 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d907      	bls.n	8002e6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e150      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
 8002e60:	40023800 	.word	0x40023800
 8002e64:	42470000 	.word	0x42470000
 8002e68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ea      	bne.n	8002e4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8097 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	4b7d      	ldr	r3, [pc, #500]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a7c      	ldr	r2, [pc, #496]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b7a      	ldr	r3, [pc, #488]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b77      	ldr	r3, [pc, #476]	; (8003094 <HAL_RCC_OscConfig+0x474>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec2:	4b74      	ldr	r3, [pc, #464]	; (8003094 <HAL_RCC_OscConfig+0x474>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a73      	ldr	r2, [pc, #460]	; (8003094 <HAL_RCC_OscConfig+0x474>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fa2f 	bl	8001330 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed6:	f7fe fa2b 	bl	8001330 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e10c      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_OscConfig+0x474>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x2ea>
 8002efc:	4b64      	ldr	r3, [pc, #400]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a63      	ldr	r2, [pc, #396]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
 8002f08:	e01c      	b.n	8002f44 <HAL_RCC_OscConfig+0x324>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x30c>
 8002f12:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a5e      	ldr	r2, [pc, #376]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a5b      	ldr	r2, [pc, #364]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0x324>
 8002f2c:	4b58      	ldr	r3, [pc, #352]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a57      	ldr	r2, [pc, #348]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
 8002f38:	4b55      	ldr	r3, [pc, #340]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a54      	ldr	r2, [pc, #336]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f023 0304 	bic.w	r3, r3, #4
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d015      	beq.n	8002f78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe f9f0 	bl	8001330 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fe f9ec 	bl	8001330 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0cb      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6a:	4b49      	ldr	r3, [pc, #292]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ee      	beq.n	8002f54 <HAL_RCC_OscConfig+0x334>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f78:	f7fe f9da 	bl	8001330 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7fe f9d6 	bl	8001330 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e0b5      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f96:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ee      	bne.n	8002f80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	4a38      	ldr	r2, [pc, #224]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a1 	beq.w	8003100 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d05c      	beq.n	8003084 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d141      	bne.n	8003056 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_RCC_OscConfig+0x478>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f9aa 	bl	8001330 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe f9a6 	bl	8001330 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e087      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	3b01      	subs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	491b      	ldr	r1, [pc, #108]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x478>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7fe f97f 	bl	8001330 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003036:	f7fe f97b 	bl	8001330 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e05c      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x416>
 8003054:	e054      	b.n	8003100 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_OscConfig+0x478>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe f968 	bl	8001330 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe f964 	bl	8001330 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e045      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x444>
 8003082:	e03d      	b.n	8003100 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d107      	bne.n	800309c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e038      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
 8003090:	40023800 	.word	0x40023800
 8003094:	40007000 	.word	0x40007000
 8003098:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x4ec>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d028      	beq.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d121      	bne.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d11a      	bne.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030cc:	4013      	ands	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d111      	bne.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	3b01      	subs	r3, #1
 80030e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800

08003110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0cc      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003124:	4b68      	ldr	r3, [pc, #416]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d90c      	bls.n	800314c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b65      	ldr	r3, [pc, #404]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0b8      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003164:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a58      	ldr	r2, [pc, #352]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800316e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800317c:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4b50      	ldr	r3, [pc, #320]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	494d      	ldr	r1, [pc, #308]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d044      	beq.n	8003230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d119      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e07f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ce:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e06f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031de:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e067      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ee:	4b37      	ldr	r3, [pc, #220]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f023 0203 	bic.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4934      	ldr	r1, [pc, #208]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003200:	f7fe f896 	bl	8001330 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	e00a      	b.n	800321e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003208:	f7fe f892 	bl	8001330 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e04f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 020c 	and.w	r2, r3, #12
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	429a      	cmp	r2, r3
 800322e:	d1eb      	bne.n	8003208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003230:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d20c      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e032      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4916      	ldr	r1, [pc, #88]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	490e      	ldr	r1, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003296:	f000 f821 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	490a      	ldr	r1, [pc, #40]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd fff6 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023c00 	.word	0x40023c00
 80032cc:	40023800 	.word	0x40023800
 80032d0:	080049d0 	.word	0x080049d0
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000008 	.word	0x20000008

080032dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e0:	b090      	sub	sp, #64	; 0x40
 80032e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	637b      	str	r3, [r7, #52]	; 0x34
 80032e8:	2300      	movs	r3, #0
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ec:	2300      	movs	r3, #0
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d00d      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x40>
 8003300:	2b08      	cmp	r3, #8
 8003302:	f200 80a1 	bhi.w	8003448 <HAL_RCC_GetSysClockFreq+0x16c>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x34>
 800330a:	2b04      	cmp	r3, #4
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x3a>
 800330e:	e09b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_GetSysClockFreq+0x184>)
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003314:	e09b      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003316:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_RCC_GetSysClockFreq+0x188>)
 8003318:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800331a:	e098      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003326:	4b4d      	ldr	r3, [pc, #308]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d028      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003332:	4b4a      	ldr	r3, [pc, #296]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	2200      	movs	r2, #0
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	627a      	str	r2, [r7, #36]	; 0x24
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003344:	2100      	movs	r1, #0
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_GetSysClockFreq+0x188>)
 8003348:	fb03 f201 	mul.w	r2, r3, r1
 800334c:	2300      	movs	r3, #0
 800334e:	fb00 f303 	mul.w	r3, r0, r3
 8003352:	4413      	add	r3, r2
 8003354:	4a43      	ldr	r2, [pc, #268]	; (8003464 <HAL_RCC_GetSysClockFreq+0x188>)
 8003356:	fba0 1202 	umull	r1, r2, r0, r2
 800335a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335c:	460a      	mov	r2, r1
 800335e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003362:	4413      	add	r3, r2
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003368:	2200      	movs	r2, #0
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	61fa      	str	r2, [r7, #28]
 800336e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003372:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003376:	f7fc ff2d 	bl	80001d4 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4613      	mov	r3, r2
 8003380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003382:	e053      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003384:	4b35      	ldr	r3, [pc, #212]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	2200      	movs	r2, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	617a      	str	r2, [r7, #20]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003396:	f04f 0b00 	mov.w	fp, #0
 800339a:	4652      	mov	r2, sl
 800339c:	465b      	mov	r3, fp
 800339e:	f04f 0000 	mov.w	r0, #0
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	0159      	lsls	r1, r3, #5
 80033a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ac:	0150      	lsls	r0, r2, #5
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	ebb2 080a 	subs.w	r8, r2, sl
 80033b6:	eb63 090b 	sbc.w	r9, r3, fp
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ce:	ebb2 0408 	subs.w	r4, r2, r8
 80033d2:	eb63 0509 	sbc.w	r5, r3, r9
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	00eb      	lsls	r3, r5, #3
 80033e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e4:	00e2      	lsls	r2, r4, #3
 80033e6:	4614      	mov	r4, r2
 80033e8:	461d      	mov	r5, r3
 80033ea:	eb14 030a 	adds.w	r3, r4, sl
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	eb45 030b 	adc.w	r3, r5, fp
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003402:	4629      	mov	r1, r5
 8003404:	028b      	lsls	r3, r1, #10
 8003406:	4621      	mov	r1, r4
 8003408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800340c:	4621      	mov	r1, r4
 800340e:	028a      	lsls	r2, r1, #10
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	2200      	movs	r2, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	60fa      	str	r2, [r7, #12]
 800341c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003420:	f7fc fed8 	bl	80001d4 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	3301      	adds	r3, #1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800343c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003446:	e002      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetSysClockFreq+0x184>)
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800344c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003450:	4618      	mov	r0, r3
 8003452:	3740      	adds	r7, #64	; 0x40
 8003454:	46bd      	mov	sp, r7
 8003456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	00f42400 	.word	0x00f42400
 8003464:	017d7840 	.word	0x017d7840

08003468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003484:	f7ff fff0 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0a9b      	lsrs	r3, r3, #10
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	080049e0 	.word	0x080049e0

080034a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034ac:	f7ff ffdc 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0b5b      	lsrs	r3, r3, #13
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	080049e0 	.word	0x080049e0

080034d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e041      	b.n	8003566 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fb3e 	bl	8000b78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 f996 	bl	8003840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e097      	b.n	80036b2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fb10 	bl	8000bbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035b2:	f023 0307 	bic.w	r3, r3, #7
 80035b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f000 f93c 	bl	8003840 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f0:	f023 0303 	bic.w	r3, r3, #3
 80035f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	4313      	orrs	r3, r2
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800360e:	f023 030c 	bic.w	r3, r3, #12
 8003612:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800361a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	4313      	orrs	r3, r2
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	011a      	lsls	r2, r3, #4
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	031b      	lsls	r3, r3, #12
 800363e:	4313      	orrs	r3, r2
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800364c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003654:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	4313      	orrs	r3, r2
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0ae      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	f200 809f 	bhi.w	8003828 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003725 	.word	0x08003725
 80036f4:	08003829 	.word	0x08003829
 80036f8:	08003829 	.word	0x08003829
 80036fc:	08003829 	.word	0x08003829
 8003700:	08003765 	.word	0x08003765
 8003704:	08003829 	.word	0x08003829
 8003708:	08003829 	.word	0x08003829
 800370c:	08003829 	.word	0x08003829
 8003710:	080037a7 	.word	0x080037a7
 8003714:	08003829 	.word	0x08003829
 8003718:	08003829 	.word	0x08003829
 800371c:	08003829 	.word	0x08003829
 8003720:	080037e7 	.word	0x080037e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f908 	bl	8003940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0208 	orr.w	r2, r2, #8
 800373e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0204 	bic.w	r2, r2, #4
 800374e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6999      	ldr	r1, [r3, #24]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	619a      	str	r2, [r3, #24]
      break;
 8003762:	e064      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f94e 	bl	8003a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6999      	ldr	r1, [r3, #24]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	619a      	str	r2, [r3, #24]
      break;
 80037a4:	e043      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f999 	bl	8003ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0208 	orr.w	r2, r2, #8
 80037c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0204 	bic.w	r2, r2, #4
 80037d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69d9      	ldr	r1, [r3, #28]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	61da      	str	r2, [r3, #28]
      break;
 80037e4:	e023      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f9e3 	bl	8003bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69d9      	ldr	r1, [r3, #28]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	021a      	lsls	r2, r3, #8
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	61da      	str	r2, [r3, #28]
      break;
 8003826:	e002      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	75fb      	strb	r3, [r7, #23]
      break;
 800382c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a34      	ldr	r2, [pc, #208]	; (8003924 <TIM_Base_SetConfig+0xe4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00f      	beq.n	8003878 <TIM_Base_SetConfig+0x38>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385e:	d00b      	beq.n	8003878 <TIM_Base_SetConfig+0x38>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a31      	ldr	r2, [pc, #196]	; (8003928 <TIM_Base_SetConfig+0xe8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <TIM_Base_SetConfig+0x38>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a30      	ldr	r2, [pc, #192]	; (800392c <TIM_Base_SetConfig+0xec>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_Base_SetConfig+0x38>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <TIM_Base_SetConfig+0xf0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d108      	bne.n	800388a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <TIM_Base_SetConfig+0xe4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01b      	beq.n	80038ca <TIM_Base_SetConfig+0x8a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003898:	d017      	beq.n	80038ca <TIM_Base_SetConfig+0x8a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a22      	ldr	r2, [pc, #136]	; (8003928 <TIM_Base_SetConfig+0xe8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <TIM_Base_SetConfig+0x8a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a21      	ldr	r2, [pc, #132]	; (800392c <TIM_Base_SetConfig+0xec>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00f      	beq.n	80038ca <TIM_Base_SetConfig+0x8a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a20      	ldr	r2, [pc, #128]	; (8003930 <TIM_Base_SetConfig+0xf0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_Base_SetConfig+0x8a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	; (8003934 <TIM_Base_SetConfig+0xf4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <TIM_Base_SetConfig+0xf8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0x8a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <TIM_Base_SetConfig+0xfc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a08      	ldr	r2, [pc, #32]	; (8003924 <TIM_Base_SetConfig+0xe4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d103      	bne.n	8003910 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	615a      	str	r2, [r3, #20]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40010000 	.word	0x40010000
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40000c00 	.word	0x40000c00
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800

08003940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0201 	bic.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0303 	bic.w	r3, r3, #3
 8003976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f023 0302 	bic.w	r3, r3, #2
 8003988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <TIM_OC1_SetConfig+0xc8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d10c      	bne.n	80039b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0308 	bic.w	r3, r3, #8
 80039a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <TIM_OC1_SetConfig+0xc8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d111      	bne.n	80039e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	621a      	str	r2, [r3, #32]
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	40010000 	.word	0x40010000

08003a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0210 	bic.w	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0320 	bic.w	r3, r3, #32
 8003a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <TIM_OC2_SetConfig+0xd4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10d      	bne.n	8003a88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <TIM_OC2_SetConfig+0xd4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d113      	bne.n	8003ab8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	621a      	str	r2, [r3, #32]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000

08003ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <TIM_OC3_SetConfig+0xd0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10d      	bne.n	8003b5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <TIM_OC3_SetConfig+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d113      	bne.n	8003b8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40010000 	.word	0x40010000

08003bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	031b      	lsls	r3, r3, #12
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <TIM_OC4_SetConfig+0x9c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d109      	bne.n	8003c2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40010000 	.word	0x40010000

08003c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e050      	b.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d018      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d013      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10c      	bne.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40010000 	.word	0x40010000
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800
 8003d2c:	40000c00 	.word	0x40000c00
 8003d30:	40014000 	.word	0x40014000

08003d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e03d      	b.n	8003dcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e03f      	b.n	8003e6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fc ffe4 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	; 0x24
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f829 	bl	8003e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e78:	b0c0      	sub	sp, #256	; 0x100
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	68d9      	ldr	r1, [r3, #12]
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	ea40 0301 	orr.w	r3, r0, r1
 8003e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ecc:	f021 010c 	bic.w	r1, r1, #12
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eda:	430b      	orrs	r3, r1
 8003edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	6999      	ldr	r1, [r3, #24]
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	ea40 0301 	orr.w	r3, r0, r1
 8003efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b8f      	ldr	r3, [pc, #572]	; (8004140 <UART_SetConfig+0x2cc>)
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d005      	beq.n	8003f14 <UART_SetConfig+0xa0>
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b8d      	ldr	r3, [pc, #564]	; (8004144 <UART_SetConfig+0x2d0>)
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d104      	bne.n	8003f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7ff fac8 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 8003f18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f1c:	e003      	b.n	8003f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f1e:	f7ff faaf 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8003f22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f30:	f040 810c 	bne.w	800414c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f46:	4622      	mov	r2, r4
 8003f48:	462b      	mov	r3, r5
 8003f4a:	1891      	adds	r1, r2, r2
 8003f4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f4e:	415b      	adcs	r3, r3
 8003f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f56:	4621      	mov	r1, r4
 8003f58:	eb12 0801 	adds.w	r8, r2, r1
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	eb43 0901 	adc.w	r9, r3, r1
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f76:	4690      	mov	r8, r2
 8003f78:	4699      	mov	r9, r3
 8003f7a:	4623      	mov	r3, r4
 8003f7c:	eb18 0303 	adds.w	r3, r8, r3
 8003f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f84:	462b      	mov	r3, r5
 8003f86:	eb49 0303 	adc.w	r3, r9, r3
 8003f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	18db      	adds	r3, r3, r3
 8003fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fa8:	4613      	mov	r3, r2
 8003faa:	eb42 0303 	adc.w	r3, r2, r3
 8003fae:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fb8:	f7fc f90c 	bl	80001d4 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4b61      	ldr	r3, [pc, #388]	; (8004148 <UART_SetConfig+0x2d4>)
 8003fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	011c      	lsls	r4, r3, #4
 8003fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	1891      	adds	r1, r2, r2
 8003fe2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fec:	4641      	mov	r1, r8
 8003fee:	eb12 0a01 	adds.w	sl, r2, r1
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400c:	4692      	mov	sl, r2
 800400e:	469b      	mov	fp, r3
 8004010:	4643      	mov	r3, r8
 8004012:	eb1a 0303 	adds.w	r3, sl, r3
 8004016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800401a:	464b      	mov	r3, r9
 800401c:	eb4b 0303 	adc.w	r3, fp, r3
 8004020:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004030:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004038:	460b      	mov	r3, r1
 800403a:	18db      	adds	r3, r3, r3
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
 800403e:	4613      	mov	r3, r2
 8004040:	eb42 0303 	adc.w	r3, r2, r3
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
 8004046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800404a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800404e:	f7fc f8c1 	bl	80001d4 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4611      	mov	r1, r2
 8004058:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <UART_SetConfig+0x2d4>)
 800405a:	fba3 2301 	umull	r2, r3, r3, r1
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2264      	movs	r2, #100	; 0x64
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	1acb      	subs	r3, r1, r3
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800406e:	4b36      	ldr	r3, [pc, #216]	; (8004148 <UART_SetConfig+0x2d4>)
 8004070:	fba3 2302 	umull	r2, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800407c:	441c      	add	r4, r3
 800407e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004082:	2200      	movs	r2, #0
 8004084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004088:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800408c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	1891      	adds	r1, r2, r2
 8004096:	63b9      	str	r1, [r7, #56]	; 0x38
 8004098:	415b      	adcs	r3, r3
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040a0:	4641      	mov	r1, r8
 80040a2:	1851      	adds	r1, r2, r1
 80040a4:	6339      	str	r1, [r7, #48]	; 0x30
 80040a6:	4649      	mov	r1, r9
 80040a8:	414b      	adcs	r3, r1
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040b8:	4659      	mov	r1, fp
 80040ba:	00cb      	lsls	r3, r1, #3
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c2:	4651      	mov	r1, sl
 80040c4:	00ca      	lsls	r2, r1, #3
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	4642      	mov	r2, r8
 80040ce:	189b      	adds	r3, r3, r2
 80040d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d4:	464b      	mov	r3, r9
 80040d6:	460a      	mov	r2, r1
 80040d8:	eb42 0303 	adc.w	r3, r2, r3
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040f4:	460b      	mov	r3, r1
 80040f6:	18db      	adds	r3, r3, r3
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fa:	4613      	mov	r3, r2
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800410a:	f7fc f863 	bl	80001d4 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <UART_SetConfig+0x2d4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a08      	ldr	r2, [pc, #32]	; (8004148 <UART_SetConfig+0x2d4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 0207 	and.w	r2, r3, #7
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4422      	add	r2, r4
 800413a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800413c:	e105      	b.n	800434a <UART_SetConfig+0x4d6>
 800413e:	bf00      	nop
 8004140:	40011000 	.word	0x40011000
 8004144:	40011400 	.word	0x40011400
 8004148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800414c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004150:	2200      	movs	r2, #0
 8004152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004156:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800415a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800415e:	4642      	mov	r2, r8
 8004160:	464b      	mov	r3, r9
 8004162:	1891      	adds	r1, r2, r2
 8004164:	6239      	str	r1, [r7, #32]
 8004166:	415b      	adcs	r3, r3
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
 800416a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800416e:	4641      	mov	r1, r8
 8004170:	1854      	adds	r4, r2, r1
 8004172:	4649      	mov	r1, r9
 8004174:	eb43 0501 	adc.w	r5, r3, r1
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	00eb      	lsls	r3, r5, #3
 8004182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004186:	00e2      	lsls	r2, r4, #3
 8004188:	4614      	mov	r4, r2
 800418a:	461d      	mov	r5, r3
 800418c:	4643      	mov	r3, r8
 800418e:	18e3      	adds	r3, r4, r3
 8004190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004194:	464b      	mov	r3, r9
 8004196:	eb45 0303 	adc.w	r3, r5, r3
 800419a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ba:	4629      	mov	r1, r5
 80041bc:	008b      	lsls	r3, r1, #2
 80041be:	4621      	mov	r1, r4
 80041c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c4:	4621      	mov	r1, r4
 80041c6:	008a      	lsls	r2, r1, #2
 80041c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041cc:	f7fc f802 	bl	80001d4 <__aeabi_uldivmod>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4b60      	ldr	r3, [pc, #384]	; (8004358 <UART_SetConfig+0x4e4>)
 80041d6:	fba3 2302 	umull	r2, r3, r3, r2
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	011c      	lsls	r4, r3, #4
 80041de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041f0:	4642      	mov	r2, r8
 80041f2:	464b      	mov	r3, r9
 80041f4:	1891      	adds	r1, r2, r2
 80041f6:	61b9      	str	r1, [r7, #24]
 80041f8:	415b      	adcs	r3, r3
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004200:	4641      	mov	r1, r8
 8004202:	1851      	adds	r1, r2, r1
 8004204:	6139      	str	r1, [r7, #16]
 8004206:	4649      	mov	r1, r9
 8004208:	414b      	adcs	r3, r1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004218:	4659      	mov	r1, fp
 800421a:	00cb      	lsls	r3, r1, #3
 800421c:	4651      	mov	r1, sl
 800421e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004222:	4651      	mov	r1, sl
 8004224:	00ca      	lsls	r2, r1, #3
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	4603      	mov	r3, r0
 800422c:	4642      	mov	r2, r8
 800422e:	189b      	adds	r3, r3, r2
 8004230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004234:	464b      	mov	r3, r9
 8004236:	460a      	mov	r2, r1
 8004238:	eb42 0303 	adc.w	r3, r2, r3
 800423c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	67bb      	str	r3, [r7, #120]	; 0x78
 800424a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004258:	4649      	mov	r1, r9
 800425a:	008b      	lsls	r3, r1, #2
 800425c:	4641      	mov	r1, r8
 800425e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004262:	4641      	mov	r1, r8
 8004264:	008a      	lsls	r2, r1, #2
 8004266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800426a:	f7fb ffb3 	bl	80001d4 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4b39      	ldr	r3, [pc, #228]	; (8004358 <UART_SetConfig+0x4e4>)
 8004274:	fba3 1302 	umull	r1, r3, r3, r2
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	2164      	movs	r1, #100	; 0x64
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	3332      	adds	r3, #50	; 0x32
 8004286:	4a34      	ldr	r2, [pc, #208]	; (8004358 <UART_SetConfig+0x4e4>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004292:	441c      	add	r4, r3
 8004294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004298:	2200      	movs	r2, #0
 800429a:	673b      	str	r3, [r7, #112]	; 0x70
 800429c:	677a      	str	r2, [r7, #116]	; 0x74
 800429e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042a2:	4642      	mov	r2, r8
 80042a4:	464b      	mov	r3, r9
 80042a6:	1891      	adds	r1, r2, r2
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	415b      	adcs	r3, r3
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b2:	4641      	mov	r1, r8
 80042b4:	1851      	adds	r1, r2, r1
 80042b6:	6039      	str	r1, [r7, #0]
 80042b8:	4649      	mov	r1, r9
 80042ba:	414b      	adcs	r3, r1
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ca:	4659      	mov	r1, fp
 80042cc:	00cb      	lsls	r3, r1, #3
 80042ce:	4651      	mov	r1, sl
 80042d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d4:	4651      	mov	r1, sl
 80042d6:	00ca      	lsls	r2, r1, #3
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	4603      	mov	r3, r0
 80042de:	4642      	mov	r2, r8
 80042e0:	189b      	adds	r3, r3, r2
 80042e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e4:	464b      	mov	r3, r9
 80042e6:	460a      	mov	r2, r1
 80042e8:	eb42 0303 	adc.w	r3, r2, r3
 80042ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	663b      	str	r3, [r7, #96]	; 0x60
 80042f8:	667a      	str	r2, [r7, #100]	; 0x64
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004306:	4649      	mov	r1, r9
 8004308:	008b      	lsls	r3, r1, #2
 800430a:	4641      	mov	r1, r8
 800430c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004310:	4641      	mov	r1, r8
 8004312:	008a      	lsls	r2, r1, #2
 8004314:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004318:	f7fb ff5c 	bl	80001d4 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <UART_SetConfig+0x4e4>)
 8004322:	fba3 1302 	umull	r1, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2164      	movs	r1, #100	; 0x64
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	3332      	adds	r3, #50	; 0x32
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <UART_SetConfig+0x4e4>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4422      	add	r2, r4
 8004348:	609a      	str	r2, [r3, #8]
}
 800434a:	bf00      	nop
 800434c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004350:	46bd      	mov	sp, r7
 8004352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004356:	bf00      	nop
 8004358:	51eb851f 	.word	0x51eb851f

0800435c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800435c:	b084      	sub	sp, #16
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	f107 001c 	add.w	r0, r7, #28
 800436a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	2b01      	cmp	r3, #1
 8004372:	d122      	bne.n	80043ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800439c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d105      	bne.n	80043ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 faa2 	bl	80048f8 <USB_CoreReset>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
 80043b8:	e01a      	b.n	80043f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fa96 	bl	80048f8 <USB_CoreReset>
 80043cc:	4603      	mov	r3, r0
 80043ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
 80043e2:	e005      	b.n	80043f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10b      	bne.n	800440e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f043 0206 	orr.w	r2, r3, #6
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f043 0220 	orr.w	r2, r3, #32
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800441a:	b004      	add	sp, #16
 800441c:	4770      	bx	lr

0800441e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d115      	bne.n	800448e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800446e:	2001      	movs	r0, #1
 8004470:	f7fc ff6a 	bl	8001348 <HAL_Delay>
      ms++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fa2e 	bl	80048dc <USB_GetMode>
 8004480:	4603      	mov	r3, r0
 8004482:	2b01      	cmp	r3, #1
 8004484:	d01e      	beq.n	80044c4 <USB_SetCurrentMode+0x84>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b31      	cmp	r3, #49	; 0x31
 800448a:	d9f0      	bls.n	800446e <USB_SetCurrentMode+0x2e>
 800448c:	e01a      	b.n	80044c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d115      	bne.n	80044c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044a0:	2001      	movs	r0, #1
 80044a2:	f7fc ff51 	bl	8001348 <HAL_Delay>
      ms++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fa15 	bl	80048dc <USB_GetMode>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <USB_SetCurrentMode+0x84>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b31      	cmp	r3, #49	; 0x31
 80044bc:	d9f0      	bls.n	80044a0 <USB_SetCurrentMode+0x60>
 80044be:	e001      	b.n	80044c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e005      	b.n	80044d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b32      	cmp	r3, #50	; 0x32
 80044c8:	d101      	bne.n	80044ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d8:	b084      	sub	sp, #16
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	e009      	b.n	800450c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3340      	adds	r3, #64	; 0x40
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	2200      	movs	r2, #0
 8004504:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	3301      	adds	r3, #1
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b0e      	cmp	r3, #14
 8004510:	d9f2      	bls.n	80044f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d11c      	bne.n	8004552 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004526:	f043 0302 	orr.w	r3, r3, #2
 800452a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
 8004550:	e00b      	b.n	800456a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004570:	461a      	mov	r2, r3
 8004572:	2300      	movs	r3, #0
 8004574:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457c:	4619      	mov	r1, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004584:	461a      	mov	r2, r3
 8004586:	680b      	ldr	r3, [r1, #0]
 8004588:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10c      	bne.n	80045aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004596:	2100      	movs	r1, #0
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f965 	bl	8004868 <USB_SetDevSpeed>
 800459e:	e008      	b.n	80045b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045a0:	2101      	movs	r1, #1
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f960 	bl	8004868 <USB_SetDevSpeed>
 80045a8:	e003      	b.n	80045b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045aa:	2103      	movs	r1, #3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f95b 	bl	8004868 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045b2:	2110      	movs	r1, #16
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f8f3 	bl	80047a0 <USB_FlushTxFifo>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f91f 	bl	8004808 <USB_FlushRxFifo>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	461a      	mov	r2, r3
 80045dc:	2300      	movs	r3, #0
 80045de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e6:	461a      	mov	r2, r3
 80045e8:	2300      	movs	r3, #0
 80045ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	e043      	b.n	8004686 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004614:	d118      	bne.n	8004648 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	461a      	mov	r2, r3
 800462a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	e013      	b.n	800465a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	461a      	mov	r2, r3
 8004640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e008      	b.n	800465a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	461a      	mov	r2, r3
 8004656:	2300      	movs	r3, #0
 8004658:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	461a      	mov	r2, r3
 8004668:	2300      	movs	r3, #0
 800466a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	461a      	mov	r2, r3
 800467a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800467e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	3301      	adds	r3, #1
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	429a      	cmp	r2, r3
 800468c:	d3b7      	bcc.n	80045fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e043      	b.n	800471c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046aa:	d118      	bne.n	80046de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046be:	461a      	mov	r2, r3
 80046c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e013      	b.n	80046f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	461a      	mov	r2, r3
 80046d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e008      	b.n	80046f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ea:	461a      	mov	r2, r3
 80046ec:	2300      	movs	r3, #0
 80046ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	461a      	mov	r2, r3
 80046fe:	2300      	movs	r3, #0
 8004700:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	461a      	mov	r2, r3
 8004710:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004714:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	3301      	adds	r3, #1
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	429a      	cmp	r2, r3
 8004722:	d3b7      	bcc.n	8004694 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004736:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004744:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f043 0210 	orr.w	r2, r3, #16
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <USB_DevInit+0x2c4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f043 0208 	orr.w	r2, r3, #8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004798:	b004      	add	sp, #16
 800479a:	4770      	bx	lr
 800479c:	803c3800 	.word	0x803c3800

080047a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <USB_FlushTxFifo+0x64>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e01b      	b.n	80047f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	daf2      	bge.n	80047ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	019b      	lsls	r3, r3, #6
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a08      	ldr	r2, [pc, #32]	; (8004804 <USB_FlushTxFifo+0x64>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e006      	b.n	80047f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d0f0      	beq.n	80047d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	00030d40 	.word	0x00030d40

08004808 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a11      	ldr	r2, [pc, #68]	; (8004864 <USB_FlushRxFifo+0x5c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e018      	b.n	8004858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	daf2      	bge.n	8004814 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2210      	movs	r2, #16
 8004836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3301      	adds	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <USB_FlushRxFifo+0x5c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e006      	b.n	8004858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d0f0      	beq.n	8004838 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	00030d40 	.word	0x00030d40

08004868 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	68f9      	ldr	r1, [r7, #12]
 8004884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048b4:	f023 0303 	bic.w	r3, r3, #3
 80048b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048c8:	f043 0302 	orr.w	r3, r3, #2
 80048cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0301 	and.w	r3, r3, #1
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a13      	ldr	r2, [pc, #76]	; (800495c <USB_CoreReset+0x64>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e01b      	b.n	800494e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	daf2      	bge.n	8004904 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <USB_CoreReset+0x64>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e006      	b.n	800494e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d0f0      	beq.n	800492e <USB_CoreReset+0x36>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	00030d40 	.word	0x00030d40

08004960 <__libc_init_array>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	4d0d      	ldr	r5, [pc, #52]	; (8004998 <__libc_init_array+0x38>)
 8004964:	4c0d      	ldr	r4, [pc, #52]	; (800499c <__libc_init_array+0x3c>)
 8004966:	1b64      	subs	r4, r4, r5
 8004968:	10a4      	asrs	r4, r4, #2
 800496a:	2600      	movs	r6, #0
 800496c:	42a6      	cmp	r6, r4
 800496e:	d109      	bne.n	8004984 <__libc_init_array+0x24>
 8004970:	4d0b      	ldr	r5, [pc, #44]	; (80049a0 <__libc_init_array+0x40>)
 8004972:	4c0c      	ldr	r4, [pc, #48]	; (80049a4 <__libc_init_array+0x44>)
 8004974:	f000 f820 	bl	80049b8 <_init>
 8004978:	1b64      	subs	r4, r4, r5
 800497a:	10a4      	asrs	r4, r4, #2
 800497c:	2600      	movs	r6, #0
 800497e:	42a6      	cmp	r6, r4
 8004980:	d105      	bne.n	800498e <__libc_init_array+0x2e>
 8004982:	bd70      	pop	{r4, r5, r6, pc}
 8004984:	f855 3b04 	ldr.w	r3, [r5], #4
 8004988:	4798      	blx	r3
 800498a:	3601      	adds	r6, #1
 800498c:	e7ee      	b.n	800496c <__libc_init_array+0xc>
 800498e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004992:	4798      	blx	r3
 8004994:	3601      	adds	r6, #1
 8004996:	e7f2      	b.n	800497e <__libc_init_array+0x1e>
 8004998:	080049f0 	.word	0x080049f0
 800499c:	080049f0 	.word	0x080049f0
 80049a0:	080049f0 	.word	0x080049f0
 80049a4:	080049f4 	.word	0x080049f4

080049a8 <memset>:
 80049a8:	4402      	add	r2, r0
 80049aa:	4603      	mov	r3, r0
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d100      	bne.n	80049b2 <memset+0xa>
 80049b0:	4770      	bx	lr
 80049b2:	f803 1b01 	strb.w	r1, [r3], #1
 80049b6:	e7f9      	b.n	80049ac <memset+0x4>

080049b8 <_init>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	bf00      	nop
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr

080049c4 <_fini>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr
