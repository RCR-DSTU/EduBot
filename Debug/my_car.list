
my_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000498c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004b20  08004b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  20000170  08004cb8  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c5c  08004cb8  00020c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dd2  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d05  00000000  00000000  00034f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00037c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  00038fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea6  00000000  00000000  0003a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e47  00000000  00000000  00052046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000916c1  00000000  00000000  00069e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb54e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000516c  00000000  00000000  000fb5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000170 	.word	0x20000170
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004b08 	.word	0x08004b08

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000174 	.word	0x20000174
 80001d0:	08004b08 	.word	0x08004b08

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	4b48      	ldr	r3, [pc, #288]	; (8000614 <MX_GPIO_Init+0x13c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a47      	ldr	r2, [pc, #284]	; (8000614 <MX_GPIO_Init+0x13c>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b45      	ldr	r3, [pc, #276]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b41      	ldr	r3, [pc, #260]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a40      	ldr	r2, [pc, #256]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b3e      	ldr	r3, [pc, #248]	; (8000614 <MX_GPIO_Init+0x13c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <MX_GPIO_Init+0x13c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a39      	ldr	r2, [pc, #228]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b37      	ldr	r3, [pc, #220]	; (8000614 <MX_GPIO_Init+0x13c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULPLXA_PIN_Pin|MULPLXB_PIN_Pin|MULPLXC_PIN_Pin|BTN1_DIR_PIN_Pin
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000548:	4833      	ldr	r0, [pc, #204]	; (8000618 <MX_GPIO_Init+0x140>)
 800054a:	f001 faed 	bl	8001b28 <HAL_GPIO_WritePin>
                          |BTN2_DIR_PIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POT_PIN_Pin;
 800054e:	2310      	movs	r3, #16
 8000550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000552:	2303      	movs	r3, #3
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POT_PIN_GPIO_Port, &GPIO_InitStruct);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4619      	mov	r1, r3
 8000560:	482e      	ldr	r0, [pc, #184]	; (800061c <MX_GPIO_Init+0x144>)
 8000562:	f001 f95d 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INT_PIN_Pin|EXTI5_PIN_Pin;
 8000566:	f248 0320 	movw	r3, #32800	; 0x8020
 800056a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000572:	2302      	movs	r3, #2
 8000574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4619      	mov	r1, r3
 800057c:	4827      	ldr	r0, [pc, #156]	; (800061c <MX_GPIO_Init+0x144>)
 800057e:	f001 f94f 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ADC_TOP_Pin|ADC_BOTTOM_Pin;
 8000582:	2303      	movs	r3, #3
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000586:	2303      	movs	r3, #3
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4619      	mov	r1, r3
 8000594:	4820      	ldr	r0, [pc, #128]	; (8000618 <MX_GPIO_Init+0x140>)
 8000596:	f001 f943 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EXTI1_PIN_Pin|EXTI2_PIN_Pin|EXTI3_PIN_Pin;
 800059a:	231c      	movs	r3, #28
 800059c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800059e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	481a      	ldr	r0, [pc, #104]	; (8000618 <MX_GPIO_Init+0x140>)
 80005b0:	f001 f936 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MULPLXA_PIN_Pin|MULPLXB_PIN_Pin|MULPLXC_PIN_Pin;
 80005b4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80005b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005be:	2302      	movs	r3, #2
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4619      	mov	r1, r3
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <MX_GPIO_Init+0x140>)
 80005ce:	f001 f927 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_DIR_PIN_Pin|BTN2_DIR_PIN_Pin;
 80005d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	4619      	mov	r1, r3
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <MX_GPIO_Init+0x140>)
 80005ec:	f001 f918 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80005f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_GPIO_Init+0x144>)
 8000608:	f001 f90a 	bl	8001820 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40020400 	.word	0x40020400
 800061c:	40020000 	.word	0x40020000

08000620 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f001 fa7d 	bl	8001b5c <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f8de 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000018c 	.word	0x2000018c
 8000674:	40005400 	.word	0x40005400
 8000678:	00061a80 	.word	0x00061a80

0800067c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	; (8000700 <HAL_I2C_MspInit+0x84>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d12c      	bne.n	80006f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = II2C_SCL_PIN_Pin|I2C_SDA_PIN_Pin;
 80006ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c0:	2312      	movs	r3, #18
 80006c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006cc:	2304      	movs	r3, #4
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <HAL_I2C_MspInit+0x8c>)
 80006d8:	f001 f8a2 	bl	8001820 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_I2C_MspInit+0x88>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40005400 	.word	0x40005400
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SSD1306_Init();
 8000710:	f000 fc76 	bl	8001000 <SSD1306_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fe68 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f81a 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff fedc 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000720:	f7ff ff7e 	bl	8000620 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000724:	f000 f8ea 	bl	80008fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000728:	f000 f976 	bl	8000a18 <MX_TIM2_Init>
  MX_TIM3_Init();
 800072c:	f000 f9c8 	bl	8000ac0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000730:	f000 faf0 	bl	8000d14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000734:	f000 fb18 	bl	8000d68 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000738:	f000 fbbe 	bl	8000eb8 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ssd1306_image(logo_RCR_50x50, 50, 10, 10);
 800073c:	230a      	movs	r3, #10
 800073e:	220a      	movs	r2, #10
 8000740:	2132      	movs	r1, #50	; 0x32
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <main+0x40>)
 8000744:	f000 fdb8 	bl	80012b8 <ssd1306_image>
 8000748:	e7f8      	b.n	800073c <main+0x30>
 800074a:	bf00      	nop
 800074c:	20000004 	.word	0x20000004

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f004 f9ca 	bl	8004af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <SystemClock_Config+0xd0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a28      	ldr	r2, [pc, #160]	; (8000820 <SystemClock_Config+0xd0>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <SystemClock_Config+0xd0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <SystemClock_Config+0xd4>)
 800079e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <SystemClock_Config+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007c4:	2319      	movs	r3, #25
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fac8 	bl	8002d70 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e6:	f000 f81f 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fd2a 	bl	8003260 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000812:	f000 f809 	bl	8000828 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	; 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 fddc 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b092      	sub	sp, #72	; 0x48
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000902:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2220      	movs	r2, #32
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f004 f8e6 	bl	8004af8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800092c:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <MX_TIM1_Init+0x114>)
 800092e:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <MX_TIM1_Init+0x118>)
 8000930:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_TIM1_Init+0x114>)
 8000934:	2253      	movs	r2, #83	; 0x53
 8000936:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <MX_TIM1_Init+0x114>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <MX_TIM1_Init+0x114>)
 8000940:	22c8      	movs	r2, #200	; 0xc8
 8000942:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000944:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <MX_TIM1_Init+0x114>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_TIM1_Init+0x114>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <MX_TIM1_Init+0x114>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000956:	482e      	ldr	r0, [pc, #184]	; (8000a10 <MX_TIM1_Init+0x114>)
 8000958:	f002 fe62 	bl	8003620 <HAL_TIM_PWM_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000962:	f7ff ff61 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000972:	4619      	mov	r1, r3
 8000974:	4826      	ldr	r0, [pc, #152]	; (8000a10 <MX_TIM1_Init+0x114>)
 8000976:	f003 fa17 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000980:	f7ff ff52 	bl	8000828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000984:	2360      	movs	r3, #96	; 0x60
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	2200      	movs	r2, #0
 80009a6:	4619      	mov	r1, r3
 80009a8:	4819      	ldr	r0, [pc, #100]	; (8000a10 <MX_TIM1_Init+0x114>)
 80009aa:	f002 ff2f 	bl	800380c <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009b4:	f7ff ff38 	bl	8000828 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	2204      	movs	r2, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4813      	ldr	r0, [pc, #76]	; (8000a10 <MX_TIM1_Init+0x114>)
 80009c2:	f002 ff23 	bl	800380c <HAL_TIM_PWM_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80009cc:	f7ff ff2c 	bl	8000828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_TIM1_Init+0x114>)
 80009f4:	f003 fa46 	bl	8003e84 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80009fe:	f7ff ff13 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_TIM1_Init+0x114>)
 8000a04:	f000 f94c 	bl	8000ca0 <HAL_TIM_MspPostInit>

}
 8000a08:	bf00      	nop
 8000a0a:	3748      	adds	r7, #72	; 0x48
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200001e0 	.word	0x200001e0
 8000a14:	40010000 	.word	0x40010000

08000a18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2224      	movs	r2, #36	; 0x24
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f004 f866 	bl	8004af8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a64:	2301      	movs	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a88:	f002 fe19 	bl	80036be <HAL_TIM_Encoder_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a92:	f7ff fec9 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000aa4:	f003 f980 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000aae:	f7ff febb 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000228 	.word	0x20000228

08000ac0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2224      	movs	r2, #36	; 0x24
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 f812 	bl	8004af8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000ade:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <MX_TIM3_Init+0xa4>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000b2e:	f002 fdc6 	bl	80036be <HAL_TIM_Encoder_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f7ff fe76 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000b4a:	f003 f92d 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b54:	f7ff fe68 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000270 	.word	0x20000270
 8000b64:	40000400 	.word	0x40000400

08000b68 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d10d      	bne.n	8000b96 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_TIM_PWM_MspInit+0x40>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <HAL_TIM_PWM_MspInit+0x40>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_TIM_PWM_MspInit+0x40>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40010000 	.word	0x40010000
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bcc:	d12c      	bne.n	8000c28 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1A_PIN_Pin|ENCODER1B_PIN_Pin;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481d      	ldr	r0, [pc, #116]	; (8000c98 <HAL_TIM_Encoder_MspInit+0xec>)
 8000c22:	f000 fdfd 	bl	8001820 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c26:	e030      	b.n	8000c8a <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <HAL_TIM_Encoder_MspInit+0xf0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12b      	bne.n	8000c8a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2A_PIN_Pin|ENCODER2B_PIN_Pin;
 8000c6a:	23c0      	movs	r3, #192	; 0xc0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <HAL_TIM_Encoder_MspInit+0xec>)
 8000c86:	f000 fdcb 	bl	8001820 <HAL_GPIO_Init>
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40000400 	.word	0x40000400

08000ca0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <HAL_TIM_MspPostInit+0x68>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d11e      	bne.n	8000d00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_TIM_MspPostInit+0x6c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_TIM_MspPostInit+0x6c>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_TIM_MspPostInit+0x6c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = BTN2_PWM_PIN_Pin|BTN1_PWM_PIN_Pin;
 8000cde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_TIM_MspPostInit+0x70>)
 8000cfc:	f000 fd90 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_USART1_UART_Init+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	f003 f8ec 	bl	8003f28 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d56:	f7ff fd67 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200002b8 	.word	0x200002b8
 8000d64:	40011000 	.word	0x40011000

08000d68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <MX_USART2_UART_Init+0x50>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000da0:	f003 f8c2 	bl	8003f28 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000daa:	f7ff fd3d 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200002fc 	.word	0x200002fc
 8000db8:	40004400 	.word	0x40004400

08000dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	; 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a32      	ldr	r2, [pc, #200]	; (8000ea4 <HAL_UART_MspInit+0xe8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12c      	bne.n	8000e38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a30      	ldr	r2, [pc, #192]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a29      	ldr	r2, [pc, #164]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX2_PIN_Pin|RX2_PIN_Pin;
 8000e16:	23c0      	movs	r3, #192	; 0xc0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e26:	2307      	movs	r3, #7
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <HAL_UART_MspInit+0xf0>)
 8000e32:	f000 fcf5 	bl	8001820 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e36:	e030      	b.n	8000e9a <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <HAL_UART_MspInit+0xf4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12b      	bne.n	8000e9a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_UART_MspInit+0xec>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX3_PIN_Pin|RX3_PIN_Pin;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <HAL_UART_MspInit+0xf8>)
 8000e96:	f000 fcc3 	bl	8001820 <HAL_GPIO_Init>
}
 8000e9a:	bf00      	nop
 8000e9c:	3730      	adds	r7, #48	; 0x30
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40011000 	.word	0x40011000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	40004400 	.word	0x40004400
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ebe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ec2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efc:	f001 fe1b 	bl	8002b36 <HAL_PCD_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f06:	f7ff fc8f 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000340 	.word	0x20000340

08000f14 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f34:	d132      	bne.n	8000f9c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <HAL_PCD_MspInit+0x90>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_PCD_MspInit+0x90>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_PCD_MspInit+0x90>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f64:	230a      	movs	r3, #10
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <HAL_PCD_MspInit+0x94>)
 8000f70:	f000 fc56 	bl	8001820 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_PCD_MspInit+0x90>)
 8000f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_PCD_MspInit+0x90>)
 8000f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7e:	6353      	str	r3, [r2, #52]	; 0x34
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <HAL_PCD_MspInit+0x90>)
 8000f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_PCD_MspInit+0x90>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HAL_PCD_MspInit+0x90>)
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb2:	490e      	ldr	r1, [pc, #56]	; (8000fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd6:	f7ff fc7f 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f003 fd69 	bl	8004ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fb95 	bl	800070c <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000ff0:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 8000ff4:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000ff8:	20000c5c 	.word	0x20000c5c

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001006:	f000 f9bb 	bl	8001380 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800100a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800100e:	2201      	movs	r2, #1
 8001010:	2178      	movs	r1, #120	; 0x78
 8001012:	4858      	ldr	r0, [pc, #352]	; (8001174 <SSD1306_Init+0x174>)
 8001014:	f001 f914 	bl	8002240 <HAL_I2C_IsDeviceReady>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800101e:	2300      	movs	r3, #0
 8001020:	e0a4      	b.n	800116c <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001022:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001026:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001028:	e002      	b.n	8001030 <SSD1306_Init+0x30>
		p--;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3b01      	subs	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f9      	bne.n	800102a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001036:	22ae      	movs	r2, #174	; 0xae
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f000 f9b6 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001040:	2220      	movs	r2, #32
 8001042:	2100      	movs	r1, #0
 8001044:	2078      	movs	r0, #120	; 0x78
 8001046:	f000 f9b1 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800104a:	2210      	movs	r2, #16
 800104c:	2100      	movs	r1, #0
 800104e:	2078      	movs	r0, #120	; 0x78
 8001050:	f000 f9ac 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001054:	22b0      	movs	r2, #176	; 0xb0
 8001056:	2100      	movs	r1, #0
 8001058:	2078      	movs	r0, #120	; 0x78
 800105a:	f000 f9a7 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800105e:	22c8      	movs	r2, #200	; 0xc8
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	; 0x78
 8001064:	f000 f9a2 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 f99d 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001072:	2210      	movs	r2, #16
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 f998 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800107c:	2240      	movs	r2, #64	; 0x40
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	; 0x78
 8001082:	f000 f993 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001086:	2281      	movs	r2, #129	; 0x81
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	; 0x78
 800108c:	f000 f98e 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	; 0x78
 8001096:	f000 f989 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800109a:	22a1      	movs	r2, #161	; 0xa1
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	; 0x78
 80010a0:	f000 f984 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010a4:	22a6      	movs	r2, #166	; 0xa6
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	; 0x78
 80010aa:	f000 f97f 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010ae:	22a8      	movs	r2, #168	; 0xa8
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 f97a 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010b8:	223f      	movs	r2, #63	; 0x3f
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f000 f975 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010c2:	22a4      	movs	r2, #164	; 0xa4
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 f970 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010cc:	22d3      	movs	r2, #211	; 0xd3
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 f96b 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 f966 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010e0:	22d5      	movs	r2, #213	; 0xd5
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 f961 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010ea:	22f0      	movs	r2, #240	; 0xf0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 f95c 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80010f4:	22d9      	movs	r2, #217	; 0xd9
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	; 0x78
 80010fa:	f000 f957 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80010fe:	2222      	movs	r2, #34	; 0x22
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 f952 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001108:	22da      	movs	r2, #218	; 0xda
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 f94d 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001112:	2212      	movs	r2, #18
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 f948 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800111c:	22db      	movs	r2, #219	; 0xdb
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	; 0x78
 8001122:	f000 f943 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001126:	2220      	movs	r2, #32
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	f000 f93e 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001130:	228d      	movs	r2, #141	; 0x8d
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	; 0x78
 8001136:	f000 f939 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800113a:	2214      	movs	r2, #20
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 f934 	bl	80013ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001144:	22af      	movs	r2, #175	; 0xaf
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 f92f 	bl	80013ac <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f834 	bl	80011bc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001154:	f000 f812 	bl	800117c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <SSD1306_Init+0x178>)
 800115a:	2200      	movs	r2, #0
 800115c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SSD1306_Init+0x178>)
 8001160:	2200      	movs	r2, #0
 8001162:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SSD1306_Init+0x178>)
 8001166:	2201      	movs	r2, #1
 8001168:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000018c 	.word	0x2000018c
 8001178:	20000c50 	.word	0x20000c50

0800117c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	SSD1306_Buffer_all[0] = 0x40;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <SSD1306_UpdateScreen+0x38>)
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1);
 8001186:	f240 4301 	movw	r3, #1025	; 0x401
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SSD1306_UpdateScreen+0x38>)
 800118c:	2178      	movs	r1, #120	; 0x78
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <SSD1306_UpdateScreen+0x3c>)
 8001190:	f000 ff26 	bl	8001fe0 <HAL_I2C_Master_Transmit_DMA>
	while(HAL_DMA_GetState(hi2c1.hdmatx) != HAL_DMA_STATE_READY)
 8001194:	e002      	b.n	800119c <SSD1306_UpdateScreen+0x20>
	{
		HAL_Delay(1); //Change for your RTOS
 8001196:	2001      	movs	r0, #1
 8001198:	f000 f998 	bl	80014cc <HAL_Delay>
	while(HAL_DMA_GetState(hi2c1.hdmatx) != HAL_DMA_STATE_READY)
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SSD1306_UpdateScreen+0x3c>)
 800119e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 faf4 	bl	800178e <HAL_DMA_GetState>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d1f4      	bne.n	8001196 <SSD1306_UpdateScreen+0x1a>
	}
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000084c 	.word	0x2000084c
 80011b8:	2000018c 	.word	0x2000018c

080011bc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(uint8_t color) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <SSD1306_Fill+0x2c>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <SSD1306_Fill+0x18>
 80011d0:	2300      	movs	r3, #0
 80011d2:	e000      	b.n	80011d6 <SSD1306_Fill+0x1a>
 80011d4:	23ff      	movs	r3, #255	; 0xff
 80011d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011da:	4619      	mov	r1, r3
 80011dc:	f003 fc8c 	bl	8004af8 <memset>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000164 	.word	0x20000164

080011ec <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
 80011ec:	b490      	push	{r4, r7}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
 80011f6:	460b      	mov	r3, r1
 80011f8:	80bb      	strh	r3, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	70fb      	strb	r3, [r7, #3]
	if (
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	2b7f      	cmp	r3, #127	; 0x7f
 8001202:	d850      	bhi.n	80012a6 <SSD1306_DrawPixel+0xba>
		x >= SSD1306_WIDTH ||
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	2b3f      	cmp	r3, #63	; 0x3f
 8001208:	d84d      	bhi.n	80012a6 <SSD1306_DrawPixel+0xba>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <SSD1306_DrawPixel+0xc4>)
 800120c:	791b      	ldrb	r3, [r3, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <SSD1306_DrawPixel+0x34>
		color = (uint8_t)!color;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	2b00      	cmp	r3, #0
 8001216:	bf0c      	ite	eq
 8001218:	2301      	moveq	r3, #1
 800121a:	2300      	movne	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d11e      	bne.n	8001264 <SSD1306_DrawPixel+0x78>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <SSD1306_DrawPixel+0xc8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	88f9      	ldrh	r1, [r7, #6]
 800122c:	88ba      	ldrh	r2, [r7, #4]
 800122e:	08d2      	lsrs	r2, r2, #3
 8001230:	b290      	uxth	r0, r2
 8001232:	4602      	mov	r2, r0
 8001234:	01d2      	lsls	r2, r2, #7
 8001236:	440a      	add	r2, r1
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b25a      	sxtb	r2, r3
 800123e:	88bb      	ldrh	r3, [r7, #4]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	b25b      	sxtb	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b25c      	sxtb	r4, r3
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <SSD1306_DrawPixel+0xc8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	88f9      	ldrh	r1, [r7, #6]
 8001256:	4602      	mov	r2, r0
 8001258:	01d2      	lsls	r2, r2, #7
 800125a:	440a      	add	r2, r1
 800125c:	4413      	add	r3, r2
 800125e:	b2e2      	uxtb	r2, r4
 8001260:	701a      	strb	r2, [r3, #0]
 8001262:	e021      	b.n	80012a8 <SSD1306_DrawPixel+0xbc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <SSD1306_DrawPixel+0xc8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	88f9      	ldrh	r1, [r7, #6]
 800126a:	88ba      	ldrh	r2, [r7, #4]
 800126c:	08d2      	lsrs	r2, r2, #3
 800126e:	b290      	uxth	r0, r2
 8001270:	4602      	mov	r2, r0
 8001272:	01d2      	lsls	r2, r2, #7
 8001274:	440a      	add	r2, r1
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b25a      	sxtb	r2, r3
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	b25b      	sxtb	r3, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	b25b      	sxtb	r3, r3
 800128e:	4013      	ands	r3, r2
 8001290:	b25c      	sxtb	r4, r3
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <SSD1306_DrawPixel+0xc8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	88f9      	ldrh	r1, [r7, #6]
 8001298:	4602      	mov	r2, r0
 800129a:	01d2      	lsls	r2, r2, #7
 800129c:	440a      	add	r2, r1
 800129e:	4413      	add	r3, r2
 80012a0:	b2e2      	uxtb	r2, r4
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e000      	b.n	80012a8 <SSD1306_DrawPixel+0xbc>
		return;
 80012a6:	bf00      	nop
	}
}
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc90      	pop	{r4, r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000c50 	.word	0x20000c50
 80012b4:	20000164 	.word	0x20000164

080012b8 <ssd1306_image>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void ssd1306_image(uint8_t *img, uint8_t frame, uint8_t x, uint8_t y)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	4608      	mov	r0, r1
 80012c2:	4611      	mov	r1, r2
 80012c4:	461a      	mov	r2, r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	70fb      	strb	r3, [r7, #3]
 80012ca:	460b      	mov	r3, r1
 80012cc:	70bb      	strb	r3, [r7, #2]
 80012ce:	4613      	mov	r3, r2
 80012d0:	707b      	strb	r3, [r7, #1]
	uint32_t i, b, j;
	
	b = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
	if(frame >= img[2])
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3302      	adds	r3, #2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	78fa      	ldrb	r2, [r7, #3]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d24a      	bcs.n	8001378 <ssd1306_image+0xc0>
		return;
	uint32_t start = (frame * (img[3] + (img[4] << 8)));
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	3203      	adds	r2, #3
 80012e8:	7812      	ldrb	r2, [r2, #0]
 80012ea:	4611      	mov	r1, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	3204      	adds	r2, #4
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	0212      	lsls	r2, r2, #8
 80012f4:	440a      	add	r2, r1
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	60bb      	str	r3, [r7, #8]
	
	/* Go through font */
	for (i = 0; i < img[1]; i++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e032      	b.n	8001368 <ssd1306_image+0xb0>
		for (j = 0; j < img[0]; j++) {
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e026      	b.n	8001356 <ssd1306_image+0x9e>

			SSD1306_DrawPixel(x + j, (y + i), (uint8_t) (img[b/8 + 5 + start] >> (b%8)) & 1);
 8001308:	78bb      	ldrb	r3, [r7, #2]
 800130a:	b29a      	uxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4413      	add	r3, r2
 8001312:	b298      	uxth	r0, r3
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	b29a      	uxth	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	b29b      	uxth	r3, r3
 800131c:	4413      	add	r3, r2
 800131e:	b299      	uxth	r1, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4413      	add	r3, r2
 8001328:	3305      	adds	r3, #5
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	fa42 f303 	asr.w	r3, r2, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	f7ff ff51 	bl	80011ec <SSD1306_DrawPixel>
			b++;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	3301      	adds	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
		for (j = 0; j < img[0]; j++) {
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4293      	cmp	r3, r2
 8001360:	d3d2      	bcc.n	8001308 <ssd1306_image+0x50>
	for (i = 0; i < img[1]; i++) {
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3301      	adds	r3, #1
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4293      	cmp	r3, r2
 8001374:	d3c5      	bcc.n	8001302 <ssd1306_image+0x4a>
 8001376:	e000      	b.n	800137a <ssd1306_image+0xc2>
		return;
 8001378:	bf00      	nop
		}
	}
}
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <ssd1306_I2C_Init+0x28>)
 8001388:	607b      	str	r3, [r7, #4]
	while(p>0)
 800138a:	e002      	b.n	8001392 <ssd1306_I2C_Init+0x12>
		p--;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f9      	bne.n	800138c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	0003d090 	.word	0x0003d090

080013ac <ssd1306_I2C_Write>:
	HAL_I2C_Master_Transmit(&hi2c1, address, &reg, 1, 100);
	HAL_I2C_Master_Transmit_DMA(&hi2c1, address, data, count);
}


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	460b      	mov	r3, r1
 80013b8:	71bb      	strb	r3, [r7, #6]
 80013ba:	4613      	mov	r3, r2
 80013bc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	b299      	uxth	r1, r3
 80013ca:	f107 020c 	add.w	r2, r7, #12
 80013ce:	230a      	movs	r3, #10
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2302      	movs	r3, #2
 80013d4:	4803      	ldr	r0, [pc, #12]	; (80013e4 <ssd1306_I2C_Write+0x38>)
 80013d6:	f000 fd05 	bl	8001de4 <HAL_I2C_Master_Transmit>
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000018c 	.word	0x2000018c

080013e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <HAL_Init+0x40>)
 80013f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_Init+0x40>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_Init+0x40>)
 800140a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f931 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	200f      	movs	r0, #15
 8001418:	f000 f808 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff fa0a 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023c00 	.word	0x40023c00

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f93b 	bl	80016c6 <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f911 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000000 	.word	0x20000000
 8001484:	2000016c 	.word	0x2000016c
 8001488:	20000168 	.word	0x20000168

0800148c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000016c 	.word	0x2000016c
 80014b0:	20000c58 	.word	0x20000c58

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000c58 	.word	0x20000c58

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff ffee 	bl	80014b4 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014f2:	bf00      	nop
 80014f4:	f7ff ffde 	bl	80014b4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000016c 	.word	0x2000016c

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff47 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff5c 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffb0 	bl	8001634 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_DMA_Start_IT+0x26>
 8001700:	2302      	movs	r3, #2
 8001702:	e040      	b.n	8001786 <HAL_DMA_Start_IT+0xa8>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d12f      	bne.n	8001778 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f848 	bl	80017c2 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001736:	223f      	movs	r2, #63	; 0x3f
 8001738:	409a      	lsls	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0216 	orr.w	r2, r2, #22
 800174c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0208 	orr.w	r2, r2, #8
 8001764:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e005      	b.n	8001784 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001780:	2302      	movs	r3, #2
 8001782:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001784:	7dfb      	ldrb	r3, [r7, #23]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179c:	b2db      	uxtb	r3, r3
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017de:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b40      	cmp	r3, #64	; 0x40
 80017ee:	d108      	bne.n	8001802 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001800:	e007      	b.n	8001812 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	60da      	str	r2, [r3, #12]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e159      	b.n	8001af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8148 	bne.w	8001aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d005      	beq.n	8001872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186e:	2b02      	cmp	r3, #2
 8001870:	d130      	bne.n	80018d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 0201 	and.w	r2, r3, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d017      	beq.n	8001910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d123      	bne.n	8001964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a2 	beq.w	8001aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a56      	ldr	r2, [pc, #344]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c2:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_GPIO_Init+0x2ec>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a49      	ldr	r2, [pc, #292]	; (8001b10 <HAL_GPIO_Init+0x2f0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x202>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a48      	ldr	r2, [pc, #288]	; (8001b14 <HAL_GPIO_Init+0x2f4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x1fe>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a47      	ldr	r2, [pc, #284]	; (8001b18 <HAL_GPIO_Init+0x2f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x1fa>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a46      	ldr	r2, [pc, #280]	; (8001b1c <HAL_GPIO_Init+0x2fc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x1f6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a45      	ldr	r2, [pc, #276]	; (8001b20 <HAL_GPIO_Init+0x300>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x1f2>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a12:	2307      	movs	r3, #7
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4935      	ldr	r1, [pc, #212]	; (8001b0c <HAL_GPIO_Init+0x2ec>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a2f      	ldr	r2, [pc, #188]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aba:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_GPIO_Init+0x304>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f aea2 	bls.w	800183c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e12b      	b.n	8001dc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7fe fd7a 	bl	800067c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2224      	movs	r2, #36	; 0x24
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bc0:	f001 fd06 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8001bc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4a81      	ldr	r2, [pc, #516]	; (8001dd0 <HAL_I2C_Init+0x274>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d807      	bhi.n	8001be0 <HAL_I2C_Init+0x84>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a80      	ldr	r2, [pc, #512]	; (8001dd4 <HAL_I2C_Init+0x278>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bf94      	ite	ls
 8001bd8:	2301      	movls	r3, #1
 8001bda:	2300      	movhi	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e006      	b.n	8001bee <HAL_I2C_Init+0x92>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4a7d      	ldr	r2, [pc, #500]	; (8001dd8 <HAL_I2C_Init+0x27c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	bf94      	ite	ls
 8001be8:	2301      	movls	r3, #1
 8001bea:	2300      	movhi	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0e7      	b.n	8001dc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4a78      	ldr	r2, [pc, #480]	; (8001ddc <HAL_I2C_Init+0x280>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9b      	lsrs	r3, r3, #18
 8001c00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_I2C_Init+0x274>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d802      	bhi.n	8001c30 <HAL_I2C_Init+0xd4>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	e009      	b.n	8001c44 <HAL_I2C_Init+0xe8>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <HAL_I2C_Init+0x284>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	099b      	lsrs	r3, r3, #6
 8001c42:	3301      	adds	r3, #1
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	495c      	ldr	r1, [pc, #368]	; (8001dd0 <HAL_I2C_Init+0x274>)
 8001c60:	428b      	cmp	r3, r1
 8001c62:	d819      	bhi.n	8001c98 <HAL_I2C_Init+0x13c>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e59      	subs	r1, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c72:	1c59      	adds	r1, r3, #1
 8001c74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c78:	400b      	ands	r3, r1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00a      	beq.n	8001c94 <HAL_I2C_Init+0x138>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1e59      	subs	r1, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c92:	e051      	b.n	8001d38 <HAL_I2C_Init+0x1dc>
 8001c94:	2304      	movs	r3, #4
 8001c96:	e04f      	b.n	8001d38 <HAL_I2C_Init+0x1dc>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d111      	bne.n	8001cc4 <HAL_I2C_Init+0x168>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	440b      	add	r3, r1
 8001cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e012      	b.n	8001cea <HAL_I2C_Init+0x18e>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1e58      	subs	r0, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	0099      	lsls	r1, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_Init+0x196>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e022      	b.n	8001d38 <HAL_I2C_Init+0x1dc>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10e      	bne.n	8001d18 <HAL_I2C_Init+0x1bc>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1e58      	subs	r0, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6859      	ldr	r1, [r3, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	440b      	add	r3, r1
 8001d08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d16:	e00f      	b.n	8001d38 <HAL_I2C_Init+0x1dc>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e58      	subs	r0, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	0099      	lsls	r1, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	6809      	ldr	r1, [r1, #0]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6911      	ldr	r1, [r2, #16]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68d2      	ldr	r2, [r2, #12]
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	000186a0 	.word	0x000186a0
 8001dd4:	001e847f 	.word	0x001e847f
 8001dd8:	003d08ff 	.word	0x003d08ff
 8001ddc:	431bde83 	.word	0x431bde83
 8001de0:	10624dd3 	.word	0x10624dd3

08001de4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	461a      	mov	r2, r3
 8001df0:	460b      	mov	r3, r1
 8001df2:	817b      	strh	r3, [r7, #10]
 8001df4:	4613      	mov	r3, r2
 8001df6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff fb5c 	bl	80014b4 <HAL_GetTick>
 8001dfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	f040 80e0 	bne.w	8001fcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2319      	movs	r3, #25
 8001e12:	2201      	movs	r2, #1
 8001e14:	4970      	ldr	r1, [pc, #448]	; (8001fd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fd06 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
 8001e24:	e0d3      	b.n	8001fce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2C_Master_Transmit+0x50>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e0cc      	b.n	8001fce <HAL_I2C_Master_Transmit+0x1ea>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d007      	beq.n	8001e5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2221      	movs	r2, #33	; 0x21
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2210      	movs	r2, #16
 8001e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	893a      	ldrh	r2, [r7, #8]
 8001e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4a50      	ldr	r2, [pc, #320]	; (8001fdc <HAL_I2C_Master_Transmit+0x1f8>)
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e9c:	8979      	ldrh	r1, [r7, #10]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fb2c 	bl	8002500 <I2C_MasterRequestWrite>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e08d      	b.n	8001fce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ec8:	e066      	b.n	8001f98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fd80 	bl	80029d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d107      	bne.n	8001ef2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06b      	b.n	8001fce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d11b      	bne.n	8001f6c <HAL_I2C_Master_Transmit+0x188>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d017      	beq.n	8001f6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	6a39      	ldr	r1, [r7, #32]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fd70 	bl	8002a56 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00d      	beq.n	8001f98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d107      	bne.n	8001f94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e01a      	b.n	8001fce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d194      	bne.n	8001eca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e000      	b.n	8001fce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
  }
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	00100002 	.word	0x00100002
 8001fdc:	ffff0000 	.word	0xffff0000

08001fe0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	461a      	mov	r2, r3
 8001fec:	460b      	mov	r3, r1
 8001fee:	817b      	strh	r3, [r7, #10]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b20      	cmp	r3, #32
 8002002:	f040 810d 	bne.w	8002220 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002006:	4b89      	ldr	r3, [pc, #548]	; (800222c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	08db      	lsrs	r3, r3, #3
 800200c:	4a88      	ldr	r2, [pc, #544]	; (8002230 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0a1a      	lsrs	r2, r3, #8
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	009a      	lsls	r2, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	3b01      	subs	r3, #1
 8002024:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d116      	bne.n	800205a <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f043 0220 	orr.w	r2, r3, #32
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0e3      	b.n	8002222 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b02      	cmp	r3, #2
 8002066:	d0db      	beq.n	8002020 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_I2C_Master_Transmit_DMA+0x96>
 8002072:	2302      	movs	r3, #2
 8002074:	e0d5      	b.n	8002222 <HAL_I2C_Master_Transmit_DMA+0x242>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d007      	beq.n	800209c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2221      	movs	r2, #33	; 0x21
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2210      	movs	r2, #16
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	893a      	ldrh	r2, [r7, #8]
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4a56      	ldr	r2, [pc, #344]	; (8002234 <HAL_I2C_Master_Transmit_DMA+0x254>)
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80020de:	897a      	ldrh	r2, [r7, #10]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d07b      	beq.n	80021e4 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d02a      	beq.n	800214a <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <HAL_I2C_Master_Transmit_DMA+0x258>)
 80020fa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	4a4e      	ldr	r2, [pc, #312]	; (800223c <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8002102:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	2200      	movs	r2, #0
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002110:	2200      	movs	r2, #0
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002118:	2200      	movs	r2, #0
 800211a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	2200      	movs	r2, #0
 8002122:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	4619      	mov	r1, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3310      	adds	r3, #16
 8002134:	461a      	mov	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	f7ff fad0 	bl	80016de <HAL_DMA_Start_IT>
 800213e:	4603      	mov	r3, r0
 8002140:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d139      	bne.n	80021bc <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8002148:	e013      	b.n	8002172 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e057      	b.n	8002222 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002188:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002198:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021a8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e02f      	b.n	800221c <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e01e      	b.n	8002222 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021f2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002202:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800221a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	e000      	b.n	8002222 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002220:	2302      	movs	r3, #2
  }
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000000 	.word	0x20000000
 8002230:	14f8b589 	.word	0x14f8b589
 8002234:	ffff0000 	.word	0xffff0000
 8002238:	08002605 	.word	0x08002605
 800223c:	080027af 	.word	0x080027af

08002240 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	460b      	mov	r3, r1
 800224e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff f930 	bl	80014b4 <HAL_GetTick>
 8002254:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	f040 8111 	bne.w	800248a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2319      	movs	r3, #25
 800226e:	2201      	movs	r2, #1
 8002270:	4988      	ldr	r1, [pc, #544]	; (8002494 <HAL_I2C_IsDeviceReady+0x254>)
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fad8 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800227e:	2302      	movs	r3, #2
 8002280:	e104      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_I2C_IsDeviceReady+0x50>
 800228c:	2302      	movs	r3, #2
 800228e:	e0fd      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d007      	beq.n	80022b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2224      	movs	r2, #36	; 0x24
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a70      	ldr	r2, [pc, #448]	; (8002498 <HAL_I2C_IsDeviceReady+0x258>)
 80022d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fa96 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00d      	beq.n	800231e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002310:	d103      	bne.n	800231a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e0b6      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800231e:	897b      	ldrh	r3, [r7, #10]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800232c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800232e:	f7ff f8c1 	bl	80014b4 <HAL_GetTick>
 8002332:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002362:	e025      	b.n	80023b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002364:	f7ff f8a6 	bl	80014b4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d302      	bcc.n	800237a <HAL_I2C_IsDeviceReady+0x13a>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	22a0      	movs	r2, #160	; 0xa0
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b02      	cmp	r3, #2
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2ba0      	cmp	r3, #160	; 0xa0
 80023ba:	d005      	beq.n	80023c8 <HAL_I2C_IsDeviceReady+0x188>
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_I2C_IsDeviceReady+0x188>
 80023c2:	7dbb      	ldrb	r3, [r7, #22]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0cd      	beq.n	8002364 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d129      	bne.n	8002432 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2319      	movs	r3, #25
 800240a:	2201      	movs	r2, #1
 800240c:	4921      	ldr	r1, [pc, #132]	; (8002494 <HAL_I2C_IsDeviceReady+0x254>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fa0a 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e036      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e02c      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002440:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800244a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2319      	movs	r3, #25
 8002452:	2201      	movs	r2, #1
 8002454:	490f      	ldr	r1, [pc, #60]	; (8002494 <HAL_I2C_IsDeviceReady+0x254>)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f9e6 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e012      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	3301      	adds	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	f4ff af32 	bcc.w	80022da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	00100002 	.word	0x00100002
 8002498:	ffff0000 	.word	0xffff0000

0800249c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	460b      	mov	r3, r1
 800250e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d006      	beq.n	800252a <I2C_MasterRequestWrite+0x2a>
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d003      	beq.n	800252a <I2C_MasterRequestWrite+0x2a>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002528:	d108      	bne.n	800253c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e00b      	b.n	8002554 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	2b12      	cmp	r3, #18
 8002542:	d107      	bne.n	8002554 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f961 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257a:	d103      	bne.n	8002584 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e035      	b.n	80025f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002590:	d108      	bne.n	80025a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002592:	897b      	ldrh	r3, [r7, #10]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025a0:	611a      	str	r2, [r3, #16]
 80025a2:	e01b      	b.n	80025dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025a4:	897b      	ldrh	r3, [r7, #10]
 80025a6:	11db      	asrs	r3, r3, #7
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 0306 	and.w	r3, r3, #6
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f063 030f 	orn	r3, r3, #15
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <I2C_MasterRequestWrite+0xfc>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f987 	bl	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e010      	b.n	80025f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025d2:	897b      	ldrh	r3, [r7, #10]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <I2C_MasterRequestWrite+0x100>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f977 	bl	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	00010008 	.word	0x00010008
 8002600:	00010002 	.word	0x00010002

08002604 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002620:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002636:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	2200      	movs	r2, #0
 8002646:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	2200      	movs	r2, #0
 8002656:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800265e:	2b21      	cmp	r3, #33	; 0x21
 8002660:	d007      	beq.n	8002672 <I2C_DMAXferCplt+0x6e>
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8002668:	2b22      	cmp	r3, #34	; 0x22
 800266a:	d131      	bne.n	80026d0 <I2C_DMAXferCplt+0xcc>
 800266c:	7cbb      	ldrb	r3, [r7, #18]
 800266e:	2b20      	cmp	r3, #32
 8002670:	d12e      	bne.n	80026d0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002680:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2200      	movs	r2, #0
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b29      	cmp	r3, #41	; 0x29
 800268c:	d10a      	bne.n	80026a4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2221      	movs	r2, #33	; 0x21
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2228      	movs	r2, #40	; 0x28
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800269c:	6978      	ldr	r0, [r7, #20]
 800269e:	f7ff ff07 	bl	80024b0 <HAL_I2C_SlaveTxCpltCallback>
 80026a2:	e00c      	b.n	80026be <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b2a      	cmp	r3, #42	; 0x2a
 80026a8:	d109      	bne.n	80026be <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2222      	movs	r2, #34	; 0x22
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2228      	movs	r2, #40	; 0x28
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f7ff ff03 	bl	80024c4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80026cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80026ce:	e06a      	b.n	80027a6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d064      	beq.n	80027a6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002704:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800270c:	d009      	beq.n	8002722 <I2C_DMAXferCplt+0x11e>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d006      	beq.n	8002722 <I2C_DMAXferCplt+0x11e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800271a:	d002      	beq.n	8002722 <I2C_DMAXferCplt+0x11e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b20      	cmp	r3, #32
 8002720:	d107      	bne.n	8002732 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002730:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002740:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002750:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2200      	movs	r2, #0
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	f7ff fec3 	bl	80024ec <HAL_I2C_ErrorCallback>
}
 8002766:	e01e      	b.n	80027a6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b40      	cmp	r3, #64	; 0x40
 800277a:	d10a      	bne.n	8002792 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7ff fea4 	bl	80024d8 <HAL_I2C_MemRxCpltCallback>
}
 8002790:	e009      	b.n	80027a6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2212      	movs	r2, #18
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80027a0:	6978      	ldr	r0, [r7, #20]
 80027a2:	f7ff fe7b 	bl	800249c <HAL_I2C_MasterRxCpltCallback>
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	2200      	movs	r2, #0
 80027ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	2200      	movs	r2, #0
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fe ffe4 	bl	80017aa <HAL_DMA_GetError>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d01b      	beq.n	8002820 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff fe66 	bl	80024ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002838:	e025      	b.n	8002886 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d021      	beq.n	8002886 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002842:	f7fe fe37 	bl	80014b4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d116      	bne.n	8002886 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e023      	b.n	80028ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10d      	bne.n	80028ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4013      	ands	r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	e00c      	b.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4013      	ands	r3, r2
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf0c      	ite	eq
 80028be:	2301      	moveq	r3, #1
 80028c0:	2300      	movne	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d0b6      	beq.n	800283a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e4:	e051      	b.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f4:	d123      	bne.n	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002904:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800290e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f043 0204 	orr.w	r2, r3, #4
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e046      	b.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d021      	beq.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002946:	f7fe fdb5 	bl	80014b4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	d302      	bcc.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d116      	bne.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e020      	b.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d10c      	bne.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e00b      	b.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d18d      	bne.n	80028e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e0:	e02d      	b.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f878 	bl	8002ad8 <I2C_IsAcknowledgeFailed>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e02d      	b.n	8002a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d021      	beq.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fe fd5b 	bl	80014b4 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d116      	bne.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e007      	b.n	8002a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d1ca      	bne.n	80029e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a62:	e02d      	b.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f837 	bl	8002ad8 <I2C_IsAcknowledgeFailed>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e02d      	b.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d021      	beq.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7c:	f7fe fd1a 	bl	80014b4 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d302      	bcc.n	8002a92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e007      	b.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d1ca      	bne.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d11b      	bne.n	8002b28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f043 0204 	orr.w	r2, r3, #4
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b38:	b08f      	sub	sp, #60	; 0x3c
 8002b3a:	af0a      	add	r7, sp, #40	; 0x28
 8002b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e10f      	b.n	8002d68 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe f9d6 	bl	8000f14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 fcf1 	bl	800456e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	687e      	ldr	r6, [r7, #4]
 8002b94:	466d      	mov	r5, sp
 8002b96:	f106 0410 	add.w	r4, r6, #16
 8002b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002baa:	1d33      	adds	r3, r6, #4
 8002bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	f001 fc7c 	bl	80044ac <USB_CoreInit>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0d0      	b.n	8002d68 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 fcdf 	bl	8004590 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e04a      	b.n	8002c6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	333d      	adds	r3, #61	; 0x3d
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	333c      	adds	r3, #60	; 0x3c
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	b298      	uxth	r0, r3
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3344      	adds	r3, #68	; 0x44
 8002c14:	4602      	mov	r2, r0
 8002c16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3340      	adds	r3, #64	; 0x40
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3348      	adds	r3, #72	; 0x48
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	334c      	adds	r3, #76	; 0x4c
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3354      	adds	r3, #84	; 0x54
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3af      	bcc.n	8002bd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e044      	b.n	8002d08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	3301      	adds	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3b5      	bcc.n	8002c7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	687e      	ldr	r6, [r7, #4]
 8002d1a:	466d      	mov	r5, sp
 8002d1c:	f106 0410 	add.w	r4, r6, #16
 8002d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d30:	1d33      	adds	r3, r6, #4
 8002d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d34:	6838      	ldr	r0, [r7, #0]
 8002d36:	f001 fc77 	bl	8004628 <USB_DevInit>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e00d      	b.n	8002d68 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fe42 	bl	80049ea <USB_DevDisconnect>

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e267      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d075      	beq.n	8002e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b85      	ldr	r3, [pc, #532]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d112      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05b      	beq.n	8002e78 <HAL_RCC_OscConfig+0x108>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d157      	bne.n	8002e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e242      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x74>
 8002dd6:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a75      	ldr	r2, [pc, #468]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6f      	ldr	r2, [pc, #444]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6c      	ldr	r2, [pc, #432]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002e08:	4b69      	ldr	r3, [pc, #420]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a68      	ldr	r2, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe fb44 	bl	80014b4 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe fb40 	bl	80014b4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e207      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xc0>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fb30 	bl	80014b4 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe fb2c 	bl	80014b4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1f3      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0xe8>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1c7      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4937      	ldr	r1, [pc, #220]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fae5 	bl	80014b4 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe fae1 	bl	80014b4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1a8      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4925      	ldr	r1, [pc, #148]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fac4 	bl	80014b4 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe fac0 	bl	80014b4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e187      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d036      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe faa4 	bl	80014b4 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe faa0 	bl	80014b4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e167      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x200>
 8002f8e:	e01b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe fa8d 	bl	80014b4 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e00e      	b.n	8002fbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fe fa89 	bl	80014b4 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d907      	bls.n	8002fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e150      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	42470000 	.word	0x42470000
 8002fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b88      	ldr	r3, [pc, #544]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ea      	bne.n	8002f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8097 	beq.w	8003104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10f      	bne.n	8003006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b7d      	ldr	r3, [pc, #500]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a7c      	ldr	r2, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b7a      	ldr	r3, [pc, #488]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b77      	ldr	r3, [pc, #476]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d118      	bne.n	8003044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003012:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a73      	ldr	r2, [pc, #460]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301e:	f7fe fa49 	bl	80014b4 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003026:	f7fe fa45 	bl	80014b4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e10c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x2ea>
 800304c:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
 8003058:	e01c      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x30c>
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a5e      	ldr	r2, [pc, #376]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a5b      	ldr	r2, [pc, #364]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	; 0x70
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800307c:	4b58      	ldr	r3, [pc, #352]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a57      	ldr	r2, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a54      	ldr	r2, [pc, #336]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 0304 	bic.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe fa0a 	bl	80014b4 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fe fa06 	bl	80014b4 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0cb      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ee      	beq.n	80030a4 <HAL_RCC_OscConfig+0x334>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe f9f4 	bl	80014b4 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe f9f0 	bl	80014b4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0b5      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ee      	bne.n	80030d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a1 	beq.w	8003250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b08      	cmp	r3, #8
 8003118:	d05c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d141      	bne.n	80031a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe f9c4 	bl	80014b4 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe f9c0 	bl	80014b4 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e087      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	3b01      	subs	r3, #1
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	061b      	lsls	r3, r3, #24
 8003172:	491b      	ldr	r1, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe f999 	bl	80014b4 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe f995 	bl	80014b4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e05c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x416>
 80031a4:	e054      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe f982 	bl	80014b4 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe f97e 	bl	80014b4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e045      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x444>
 80031d2:	e03d      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e038      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCC_OscConfig+0x4ec>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d028      	beq.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d121      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d11a      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003224:	4293      	cmp	r3, r2
 8003226:	d111      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0cc      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d90c      	bls.n	800329c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0b8      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	494d      	ldr	r1, [pc, #308]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d044      	beq.n	8003380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d119      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d003      	beq.n	800331e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331a:	2b03      	cmp	r3, #3
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e067      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4934      	ldr	r1, [pc, #208]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7fe f8b0 	bl	80014b4 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fe f8ac 	bl	80014b4 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d20c      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e032      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4916      	ldr	r1, [pc, #88]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	490e      	ldr	r1, [pc, #56]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e6:	f000 f821 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	490a      	ldr	r1, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	5ccb      	ldrb	r3, [r1, r3]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe f810 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023c00 	.word	0x40023c00
 800341c:	40023800 	.word	0x40023800
 8003420:	08004b20 	.word	0x08004b20
 8003424:	20000000 	.word	0x20000000
 8003428:	20000168 	.word	0x20000168

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003430:	b090      	sub	sp, #64	; 0x40
 8003432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
 8003438:	2300      	movs	r3, #0
 800343a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343c:	2300      	movs	r3, #0
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d00d      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x40>
 8003450:	2b08      	cmp	r3, #8
 8003452:	f200 80a1 	bhi.w	8003598 <HAL_RCC_GetSysClockFreq+0x16c>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x34>
 800345a:	2b04      	cmp	r3, #4
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x3a>
 800345e:	e09b      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003462:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003464:	e09b      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003466:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800346a:	e098      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b4f      	ldr	r3, [pc, #316]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003476:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d028      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	627a      	str	r2, [r7, #36]	; 0x24
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003494:	2100      	movs	r1, #0
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003498:	fb03 f201 	mul.w	r2, r3, r1
 800349c:	2300      	movs	r3, #0
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	4a43      	ldr	r2, [pc, #268]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034a6:	fba0 1202 	umull	r1, r2, r0, r2
 80034aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ac:	460a      	mov	r2, r1
 80034ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80034b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b2:	4413      	add	r3, r2
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	2200      	movs	r2, #0
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	61fa      	str	r2, [r7, #28]
 80034be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034c6:	f7fc fe85 	bl	80001d4 <__aeabi_uldivmod>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4613      	mov	r3, r2
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d2:	e053      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	2200      	movs	r2, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	617a      	str	r2, [r7, #20]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034e6:	f04f 0b00 	mov.w	fp, #0
 80034ea:	4652      	mov	r2, sl
 80034ec:	465b      	mov	r3, fp
 80034ee:	f04f 0000 	mov.w	r0, #0
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	0159      	lsls	r1, r3, #5
 80034f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fc:	0150      	lsls	r0, r2, #5
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	ebb2 080a 	subs.w	r8, r2, sl
 8003506:	eb63 090b 	sbc.w	r9, r3, fp
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003516:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800351a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800351e:	ebb2 0408 	subs.w	r4, r2, r8
 8003522:	eb63 0509 	sbc.w	r5, r3, r9
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	00eb      	lsls	r3, r5, #3
 8003530:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003534:	00e2      	lsls	r2, r4, #3
 8003536:	4614      	mov	r4, r2
 8003538:	461d      	mov	r5, r3
 800353a:	eb14 030a 	adds.w	r3, r4, sl
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	eb45 030b 	adc.w	r3, r5, fp
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003552:	4629      	mov	r1, r5
 8003554:	028b      	lsls	r3, r1, #10
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800355c:	4621      	mov	r1, r4
 800355e:	028a      	lsls	r2, r1, #10
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003566:	2200      	movs	r2, #0
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	60fa      	str	r2, [r7, #12]
 800356c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003570:	f7fc fe30 	bl	80001d4 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800358c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3740      	adds	r7, #64	; 0x40
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	017d7840 	.word	0x017d7840

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08004b30 	.word	0x08004b30

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	08004b30 	.word	0x08004b30

08003620 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e041      	b.n	80036b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fd fa8e 	bl	8000b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f000 f996 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e097      	b.n	8003802 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fa60 	bl	8000bac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003702:	f023 0307 	bic.w	r3, r3, #7
 8003706:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f000 f93c 	bl	8003990 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003740:	f023 0303 	bic.w	r3, r3, #3
 8003744:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	4313      	orrs	r3, r2
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800375e:	f023 030c 	bic.w	r3, r3, #12
 8003762:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800376a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	4313      	orrs	r3, r2
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	011a      	lsls	r2, r3, #4
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	031b      	lsls	r3, r3, #12
 800378e:	4313      	orrs	r3, r2
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800379c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037a4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	4313      	orrs	r3, r2
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003826:	2302      	movs	r3, #2
 8003828:	e0ae      	b.n	8003988 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b0c      	cmp	r3, #12
 8003836:	f200 809f 	bhi.w	8003978 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800383a:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003840:	08003875 	.word	0x08003875
 8003844:	08003979 	.word	0x08003979
 8003848:	08003979 	.word	0x08003979
 800384c:	08003979 	.word	0x08003979
 8003850:	080038b5 	.word	0x080038b5
 8003854:	08003979 	.word	0x08003979
 8003858:	08003979 	.word	0x08003979
 800385c:	08003979 	.word	0x08003979
 8003860:	080038f7 	.word	0x080038f7
 8003864:	08003979 	.word	0x08003979
 8003868:	08003979 	.word	0x08003979
 800386c:	08003979 	.word	0x08003979
 8003870:	08003937 	.word	0x08003937
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f908 	bl	8003a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0208 	orr.w	r2, r2, #8
 800388e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0204 	bic.w	r2, r2, #4
 800389e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6999      	ldr	r1, [r3, #24]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	619a      	str	r2, [r3, #24]
      break;
 80038b2:	e064      	b.n	800397e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f94e 	bl	8003b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6999      	ldr	r1, [r3, #24]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	021a      	lsls	r2, r3, #8
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	619a      	str	r2, [r3, #24]
      break;
 80038f4:	e043      	b.n	800397e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 f999 	bl	8003c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0208 	orr.w	r2, r2, #8
 8003910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0204 	bic.w	r2, r2, #4
 8003920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69d9      	ldr	r1, [r3, #28]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	61da      	str	r2, [r3, #28]
      break;
 8003934:	e023      	b.n	800397e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f9e3 	bl	8003d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69d9      	ldr	r1, [r3, #28]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	021a      	lsls	r2, r3, #8
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	61da      	str	r2, [r3, #28]
      break;
 8003976:	e002      	b.n	800397e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
      break;
 800397c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a34      	ldr	r2, [pc, #208]	; (8003a74 <TIM_Base_SetConfig+0xe4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00f      	beq.n	80039c8 <TIM_Base_SetConfig+0x38>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ae:	d00b      	beq.n	80039c8 <TIM_Base_SetConfig+0x38>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a31      	ldr	r2, [pc, #196]	; (8003a78 <TIM_Base_SetConfig+0xe8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <TIM_Base_SetConfig+0x38>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a30      	ldr	r2, [pc, #192]	; (8003a7c <TIM_Base_SetConfig+0xec>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_Base_SetConfig+0x38>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a2f      	ldr	r2, [pc, #188]	; (8003a80 <TIM_Base_SetConfig+0xf0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d108      	bne.n	80039da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <TIM_Base_SetConfig+0xe4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01b      	beq.n	8003a1a <TIM_Base_SetConfig+0x8a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d017      	beq.n	8003a1a <TIM_Base_SetConfig+0x8a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <TIM_Base_SetConfig+0xe8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <TIM_Base_SetConfig+0x8a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a21      	ldr	r2, [pc, #132]	; (8003a7c <TIM_Base_SetConfig+0xec>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00f      	beq.n	8003a1a <TIM_Base_SetConfig+0x8a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <TIM_Base_SetConfig+0xf0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0x8a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <TIM_Base_SetConfig+0xf4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0x8a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <TIM_Base_SetConfig+0xf8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0x8a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <TIM_Base_SetConfig+0xfc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a08      	ldr	r2, [pc, #32]	; (8003a74 <TIM_Base_SetConfig+0xe4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40014400 	.word	0x40014400
 8003a8c:	40014800 	.word	0x40014800

08003a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0201 	bic.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f023 0302 	bic.w	r3, r3, #2
 8003ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <TIM_OC1_SetConfig+0xc8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10c      	bne.n	8003b06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0308 	bic.w	r3, r3, #8
 8003af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <TIM_OC1_SetConfig+0xc8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d111      	bne.n	8003b32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40010000 	.word	0x40010000

08003b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f023 0210 	bic.w	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0320 	bic.w	r3, r3, #32
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <TIM_OC2_SetConfig+0xd4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10d      	bne.n	8003bd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <TIM_OC2_SetConfig+0xd4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d113      	bne.n	8003c08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000

08003c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <TIM_OC3_SetConfig+0xd0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10d      	bne.n	8003cae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <TIM_OC3_SetConfig+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d113      	bne.n	8003cde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40010000 	.word	0x40010000

08003d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	031b      	lsls	r3, r3, #12
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a10      	ldr	r2, [pc, #64]	; (8003da4 <TIM_OC4_SetConfig+0x9c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d109      	bne.n	8003d7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000

08003da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e050      	b.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d018      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d013      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a18      	ldr	r2, [pc, #96]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00e      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10c      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40014000 	.word	0x40014000

08003e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e03d      	b.n	8003f1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e03f      	b.n	8003fba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fc ff34 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2224      	movs	r2, #36	; 0x24
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f829 	bl	8003fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc8:	b0c0      	sub	sp, #256	; 0x100
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	68d9      	ldr	r1, [r3, #12]
 8003fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	ea40 0301 	orr.w	r3, r0, r1
 8003fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	431a      	orrs	r2, r3
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800401c:	f021 010c 	bic.w	r1, r1, #12
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800402a:	430b      	orrs	r3, r1
 800402c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	6999      	ldr	r1, [r3, #24]
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	ea40 0301 	orr.w	r3, r0, r1
 800404a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b8f      	ldr	r3, [pc, #572]	; (8004290 <UART_SetConfig+0x2cc>)
 8004054:	429a      	cmp	r2, r3
 8004056:	d005      	beq.n	8004064 <UART_SetConfig+0xa0>
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b8d      	ldr	r3, [pc, #564]	; (8004294 <UART_SetConfig+0x2d0>)
 8004060:	429a      	cmp	r2, r3
 8004062:	d104      	bne.n	800406e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7ff fac8 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8004068:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800406c:	e003      	b.n	8004076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800406e:	f7ff faaf 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8004072:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004080:	f040 810c 	bne.w	800429c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004088:	2200      	movs	r2, #0
 800408a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800408e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004096:	4622      	mov	r2, r4
 8004098:	462b      	mov	r3, r5
 800409a:	1891      	adds	r1, r2, r2
 800409c:	65b9      	str	r1, [r7, #88]	; 0x58
 800409e:	415b      	adcs	r3, r3
 80040a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040a6:	4621      	mov	r1, r4
 80040a8:	eb12 0801 	adds.w	r8, r2, r1
 80040ac:	4629      	mov	r1, r5
 80040ae:	eb43 0901 	adc.w	r9, r3, r1
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040c6:	4690      	mov	r8, r2
 80040c8:	4699      	mov	r9, r3
 80040ca:	4623      	mov	r3, r4
 80040cc:	eb18 0303 	adds.w	r3, r8, r3
 80040d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040d4:	462b      	mov	r3, r5
 80040d6:	eb49 0303 	adc.w	r3, r9, r3
 80040da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040f2:	460b      	mov	r3, r1
 80040f4:	18db      	adds	r3, r3, r3
 80040f6:	653b      	str	r3, [r7, #80]	; 0x50
 80040f8:	4613      	mov	r3, r2
 80040fa:	eb42 0303 	adc.w	r3, r2, r3
 80040fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004108:	f7fc f864 	bl	80001d4 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4b61      	ldr	r3, [pc, #388]	; (8004298 <UART_SetConfig+0x2d4>)
 8004112:	fba3 2302 	umull	r2, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	011c      	lsls	r4, r3, #4
 800411a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004124:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	1891      	adds	r1, r2, r2
 8004132:	64b9      	str	r1, [r7, #72]	; 0x48
 8004134:	415b      	adcs	r3, r3
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800413c:	4641      	mov	r1, r8
 800413e:	eb12 0a01 	adds.w	sl, r2, r1
 8004142:	4649      	mov	r1, r9
 8004144:	eb43 0b01 	adc.w	fp, r3, r1
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800415c:	4692      	mov	sl, r2
 800415e:	469b      	mov	fp, r3
 8004160:	4643      	mov	r3, r8
 8004162:	eb1a 0303 	adds.w	r3, sl, r3
 8004166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800416a:	464b      	mov	r3, r9
 800416c:	eb4b 0303 	adc.w	r3, fp, r3
 8004170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004180:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004188:	460b      	mov	r3, r1
 800418a:	18db      	adds	r3, r3, r3
 800418c:	643b      	str	r3, [r7, #64]	; 0x40
 800418e:	4613      	mov	r3, r2
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	647b      	str	r3, [r7, #68]	; 0x44
 8004196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800419a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800419e:	f7fc f819 	bl	80001d4 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <UART_SetConfig+0x2d4>)
 80041aa:	fba3 2301 	umull	r2, r3, r3, r1
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2264      	movs	r2, #100	; 0x64
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	1acb      	subs	r3, r1, r3
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041be:	4b36      	ldr	r3, [pc, #216]	; (8004298 <UART_SetConfig+0x2d4>)
 80041c0:	fba3 2302 	umull	r2, r3, r3, r2
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041cc:	441c      	add	r4, r3
 80041ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041e8:	415b      	adcs	r3, r3
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041f0:	4641      	mov	r1, r8
 80041f2:	1851      	adds	r1, r2, r1
 80041f4:	6339      	str	r1, [r7, #48]	; 0x30
 80041f6:	4649      	mov	r1, r9
 80041f8:	414b      	adcs	r3, r1
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004208:	4659      	mov	r1, fp
 800420a:	00cb      	lsls	r3, r1, #3
 800420c:	4651      	mov	r1, sl
 800420e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004212:	4651      	mov	r1, sl
 8004214:	00ca      	lsls	r2, r1, #3
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	4603      	mov	r3, r0
 800421c:	4642      	mov	r2, r8
 800421e:	189b      	adds	r3, r3, r2
 8004220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004224:	464b      	mov	r3, r9
 8004226:	460a      	mov	r2, r1
 8004228:	eb42 0303 	adc.w	r3, r2, r3
 800422c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800423c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004244:	460b      	mov	r3, r1
 8004246:	18db      	adds	r3, r3, r3
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
 800424a:	4613      	mov	r3, r2
 800424c:	eb42 0303 	adc.w	r3, r2, r3
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800425a:	f7fb ffbb 	bl	80001d4 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <UART_SetConfig+0x2d4>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	; 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a08      	ldr	r2, [pc, #32]	; (8004298 <UART_SetConfig+0x2d4>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 0207 	and.w	r2, r3, #7
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4422      	add	r2, r4
 800428a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800428c:	e105      	b.n	800449a <UART_SetConfig+0x4d6>
 800428e:	bf00      	nop
 8004290:	40011000 	.word	0x40011000
 8004294:	40011400 	.word	0x40011400
 8004298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800429c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042ae:	4642      	mov	r2, r8
 80042b0:	464b      	mov	r3, r9
 80042b2:	1891      	adds	r1, r2, r2
 80042b4:	6239      	str	r1, [r7, #32]
 80042b6:	415b      	adcs	r3, r3
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042be:	4641      	mov	r1, r8
 80042c0:	1854      	adds	r4, r2, r1
 80042c2:	4649      	mov	r1, r9
 80042c4:	eb43 0501 	adc.w	r5, r3, r1
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	00eb      	lsls	r3, r5, #3
 80042d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d6:	00e2      	lsls	r2, r4, #3
 80042d8:	4614      	mov	r4, r2
 80042da:	461d      	mov	r5, r3
 80042dc:	4643      	mov	r3, r8
 80042de:	18e3      	adds	r3, r4, r3
 80042e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042e4:	464b      	mov	r3, r9
 80042e6:	eb45 0303 	adc.w	r3, r5, r3
 80042ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800430a:	4629      	mov	r1, r5
 800430c:	008b      	lsls	r3, r1, #2
 800430e:	4621      	mov	r1, r4
 8004310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004314:	4621      	mov	r1, r4
 8004316:	008a      	lsls	r2, r1, #2
 8004318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800431c:	f7fb ff5a 	bl	80001d4 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4b60      	ldr	r3, [pc, #384]	; (80044a8 <UART_SetConfig+0x4e4>)
 8004326:	fba3 2302 	umull	r2, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	011c      	lsls	r4, r3, #4
 800432e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800433c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	1891      	adds	r1, r2, r2
 8004346:	61b9      	str	r1, [r7, #24]
 8004348:	415b      	adcs	r3, r3
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004350:	4641      	mov	r1, r8
 8004352:	1851      	adds	r1, r2, r1
 8004354:	6139      	str	r1, [r7, #16]
 8004356:	4649      	mov	r1, r9
 8004358:	414b      	adcs	r3, r1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004368:	4659      	mov	r1, fp
 800436a:	00cb      	lsls	r3, r1, #3
 800436c:	4651      	mov	r1, sl
 800436e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004372:	4651      	mov	r1, sl
 8004374:	00ca      	lsls	r2, r1, #3
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	4603      	mov	r3, r0
 800437c:	4642      	mov	r2, r8
 800437e:	189b      	adds	r3, r3, r2
 8004380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004384:	464b      	mov	r3, r9
 8004386:	460a      	mov	r2, r1
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	67bb      	str	r3, [r7, #120]	; 0x78
 800439a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043a8:	4649      	mov	r1, r9
 80043aa:	008b      	lsls	r3, r1, #2
 80043ac:	4641      	mov	r1, r8
 80043ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043b2:	4641      	mov	r1, r8
 80043b4:	008a      	lsls	r2, r1, #2
 80043b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043ba:	f7fb ff0b 	bl	80001d4 <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <UART_SetConfig+0x4e4>)
 80043c4:	fba3 1302 	umull	r1, r3, r3, r2
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	2164      	movs	r1, #100	; 0x64
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	3332      	adds	r3, #50	; 0x32
 80043d6:	4a34      	ldr	r2, [pc, #208]	; (80044a8 <UART_SetConfig+0x4e4>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e2:	441c      	add	r4, r3
 80043e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e8:	2200      	movs	r2, #0
 80043ea:	673b      	str	r3, [r7, #112]	; 0x70
 80043ec:	677a      	str	r2, [r7, #116]	; 0x74
 80043ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043f2:	4642      	mov	r2, r8
 80043f4:	464b      	mov	r3, r9
 80043f6:	1891      	adds	r1, r2, r2
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	415b      	adcs	r3, r3
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004402:	4641      	mov	r1, r8
 8004404:	1851      	adds	r1, r2, r1
 8004406:	6039      	str	r1, [r7, #0]
 8004408:	4649      	mov	r1, r9
 800440a:	414b      	adcs	r3, r1
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800441a:	4659      	mov	r1, fp
 800441c:	00cb      	lsls	r3, r1, #3
 800441e:	4651      	mov	r1, sl
 8004420:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004424:	4651      	mov	r1, sl
 8004426:	00ca      	lsls	r2, r1, #3
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	4603      	mov	r3, r0
 800442e:	4642      	mov	r2, r8
 8004430:	189b      	adds	r3, r3, r2
 8004432:	66bb      	str	r3, [r7, #104]	; 0x68
 8004434:	464b      	mov	r3, r9
 8004436:	460a      	mov	r2, r1
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	663b      	str	r3, [r7, #96]	; 0x60
 8004448:	667a      	str	r2, [r7, #100]	; 0x64
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004456:	4649      	mov	r1, r9
 8004458:	008b      	lsls	r3, r1, #2
 800445a:	4641      	mov	r1, r8
 800445c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004460:	4641      	mov	r1, r8
 8004462:	008a      	lsls	r2, r1, #2
 8004464:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004468:	f7fb feb4 	bl	80001d4 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <UART_SetConfig+0x4e4>)
 8004472:	fba3 1302 	umull	r1, r3, r3, r2
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	2164      	movs	r1, #100	; 0x64
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	3332      	adds	r3, #50	; 0x32
 8004484:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <UART_SetConfig+0x4e4>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	f003 020f 	and.w	r2, r3, #15
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4422      	add	r2, r4
 8004498:	609a      	str	r2, [r3, #8]
}
 800449a:	bf00      	nop
 800449c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044a0:	46bd      	mov	sp, r7
 80044a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a6:	bf00      	nop
 80044a8:	51eb851f 	.word	0x51eb851f

080044ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044ac:	b084      	sub	sp, #16
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	f107 001c 	add.w	r0, r7, #28
 80044ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d122      	bne.n	800450a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d105      	bne.n	80044fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 faa2 	bl	8004a48 <USB_CoreReset>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	e01a      	b.n	8004540 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa96 	bl	8004a48 <USB_CoreReset>
 800451c:	4603      	mov	r3, r0
 800451e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
 8004532:	e005      	b.n	8004540 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10b      	bne.n	800455e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f043 0206 	orr.w	r2, r3, #6
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f043 0220 	orr.w	r2, r3, #32
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800455e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800456a:	b004      	add	sp, #16
 800456c:	4770      	bx	lr

0800456e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 0201 	bic.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d115      	bne.n	80045de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045be:	2001      	movs	r0, #1
 80045c0:	f7fc ff84 	bl	80014cc <HAL_Delay>
      ms++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa2e 	bl	8004a2c <USB_GetMode>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d01e      	beq.n	8004614 <USB_SetCurrentMode+0x84>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b31      	cmp	r3, #49	; 0x31
 80045da:	d9f0      	bls.n	80045be <USB_SetCurrentMode+0x2e>
 80045dc:	e01a      	b.n	8004614 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d115      	bne.n	8004610 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045f0:	2001      	movs	r0, #1
 80045f2:	f7fc ff6b 	bl	80014cc <HAL_Delay>
      ms++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fa15 	bl	8004a2c <USB_GetMode>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <USB_SetCurrentMode+0x84>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b31      	cmp	r3, #49	; 0x31
 800460c:	d9f0      	bls.n	80045f0 <USB_SetCurrentMode+0x60>
 800460e:	e001      	b.n	8004614 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e005      	b.n	8004620 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b32      	cmp	r3, #50	; 0x32
 8004618:	d101      	bne.n	800461e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004628:	b084      	sub	sp, #16
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	e009      	b.n	800465c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3340      	adds	r3, #64	; 0x40
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	2200      	movs	r2, #0
 8004654:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3301      	adds	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b0e      	cmp	r3, #14
 8004660:	d9f2      	bls.n	8004648 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11c      	bne.n	80046a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
 80046a0:	e00b      	b.n	80046ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c0:	461a      	mov	r2, r3
 80046c2:	2300      	movs	r3, #0
 80046c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	4619      	mov	r1, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d4:	461a      	mov	r2, r3
 80046d6:	680b      	ldr	r3, [r1, #0]
 80046d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d10c      	bne.n	80046fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046e6:	2100      	movs	r1, #0
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f965 	bl	80049b8 <USB_SetDevSpeed>
 80046ee:	e008      	b.n	8004702 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046f0:	2101      	movs	r1, #1
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f960 	bl	80049b8 <USB_SetDevSpeed>
 80046f8:	e003      	b.n	8004702 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046fa:	2103      	movs	r1, #3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f95b 	bl	80049b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004702:	2110      	movs	r1, #16
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f8f3 	bl	80048f0 <USB_FlushTxFifo>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f91f 	bl	8004958 <USB_FlushRxFifo>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	461a      	mov	r2, r3
 800472c:	2300      	movs	r3, #0
 800472e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004742:	461a      	mov	r2, r3
 8004744:	2300      	movs	r3, #0
 8004746:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	e043      	b.n	80047d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004764:	d118      	bne.n	8004798 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	461a      	mov	r2, r3
 800477a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e013      	b.n	80047aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478e:	461a      	mov	r2, r3
 8004790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e008      	b.n	80047aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	461a      	mov	r2, r3
 80047b8:	2300      	movs	r3, #0
 80047ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	461a      	mov	r2, r3
 80047ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	3301      	adds	r3, #1
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3b7      	bcc.n	800474e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e043      	b.n	800486c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047fa:	d118      	bne.n	800482e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	461a      	mov	r2, r3
 8004810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e013      	b.n	8004840 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004824:	461a      	mov	r2, r3
 8004826:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e008      	b.n	8004840 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483a:	461a      	mov	r2, r3
 800483c:	2300      	movs	r3, #0
 800483e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	461a      	mov	r2, r3
 800484e:	2300      	movs	r3, #0
 8004850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004864:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	3301      	adds	r3, #1
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	429a      	cmp	r2, r3
 8004872:	d3b7      	bcc.n	80047e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004886:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004894:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f043 0210 	orr.w	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <USB_DevInit+0x2c4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f043 0208 	orr.w	r2, r3, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d4:	f043 0304 	orr.w	r3, r3, #4
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e8:	b004      	add	sp, #16
 80048ea:	4770      	bx	lr
 80048ec:	803c3800 	.word	0x803c3800

080048f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a13      	ldr	r2, [pc, #76]	; (8004954 <USB_FlushTxFifo+0x64>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e01b      	b.n	8004948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	daf2      	bge.n	80048fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	019b      	lsls	r3, r3, #6
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <USB_FlushTxFifo+0x64>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e006      	b.n	8004948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b20      	cmp	r3, #32
 8004944:	d0f0      	beq.n	8004928 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	00030d40 	.word	0x00030d40

08004958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <USB_FlushRxFifo+0x5c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e018      	b.n	80049a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	daf2      	bge.n	8004964 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2210      	movs	r2, #16
 8004986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <USB_FlushRxFifo+0x5c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e006      	b.n	80049a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d0f0      	beq.n	8004988 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	00030d40 	.word	0x00030d40

080049b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a04:	f023 0303 	bic.w	r3, r3, #3
 8004a08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a18:	f043 0302 	orr.w	r3, r3, #2
 8004a1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0301 	and.w	r3, r3, #1
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3301      	adds	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a13      	ldr	r2, [pc, #76]	; (8004aac <USB_CoreReset+0x64>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e01b      	b.n	8004a9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	daf2      	bge.n	8004a54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f043 0201 	orr.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <USB_CoreReset+0x64>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e006      	b.n	8004a9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d0f0      	beq.n	8004a7e <USB_CoreReset+0x36>

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	00030d40 	.word	0x00030d40

08004ab0 <__libc_init_array>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	4d0d      	ldr	r5, [pc, #52]	; (8004ae8 <__libc_init_array+0x38>)
 8004ab4:	4c0d      	ldr	r4, [pc, #52]	; (8004aec <__libc_init_array+0x3c>)
 8004ab6:	1b64      	subs	r4, r4, r5
 8004ab8:	10a4      	asrs	r4, r4, #2
 8004aba:	2600      	movs	r6, #0
 8004abc:	42a6      	cmp	r6, r4
 8004abe:	d109      	bne.n	8004ad4 <__libc_init_array+0x24>
 8004ac0:	4d0b      	ldr	r5, [pc, #44]	; (8004af0 <__libc_init_array+0x40>)
 8004ac2:	4c0c      	ldr	r4, [pc, #48]	; (8004af4 <__libc_init_array+0x44>)
 8004ac4:	f000 f820 	bl	8004b08 <_init>
 8004ac8:	1b64      	subs	r4, r4, r5
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	2600      	movs	r6, #0
 8004ace:	42a6      	cmp	r6, r4
 8004ad0:	d105      	bne.n	8004ade <__libc_init_array+0x2e>
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad8:	4798      	blx	r3
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7ee      	b.n	8004abc <__libc_init_array+0xc>
 8004ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae2:	4798      	blx	r3
 8004ae4:	3601      	adds	r6, #1
 8004ae6:	e7f2      	b.n	8004ace <__libc_init_array+0x1e>
 8004ae8:	08004b40 	.word	0x08004b40
 8004aec:	08004b40 	.word	0x08004b40
 8004af0:	08004b40 	.word	0x08004b40
 8004af4:	08004b44 	.word	0x08004b44

08004af8 <memset>:
 8004af8:	4402      	add	r2, r0
 8004afa:	4603      	mov	r3, r0
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d100      	bne.n	8004b02 <memset+0xa>
 8004b00:	4770      	bx	lr
 8004b02:	f803 1b01 	strb.w	r1, [r3], #1
 8004b06:	e7f9      	b.n	8004afc <memset+0x4>

08004b08 <_init>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr

08004b14 <_fini>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr
